{"meta":{"version":1,"warehouse":"3.0.2"},"models":{"Asset":[{"_id":"themes/pure/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/README.md","path":"fonts/README.md","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.eot","path":"fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.ttf","path":"fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.woff","path":"fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/pure/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/thumb-default.png","path":"images/thumb-default.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","path":"images/xingqiu-qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.js","path":"js/application.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/application.min.js","path":"js/application.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/insight.js","path":"js/insight.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.min.js","path":"js/plugin.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.min.css","path":"css/style.min.css","modified":1,"renderable":1},{"_id":"themes/pure/source/fonts/iconfont.svg","path":"fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","path":"images/favatar/chuangzaoshi-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","path":"images/favatar/SzsFox-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","path":"images/favatar/idesign-logo.png","modified":1,"renderable":1},{"_id":"themes/pure/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js","path":"js/plugin.js","modified":1,"renderable":1},{"_id":"themes/pure/source/js/plugin.js.map","path":"js/plugin.js.map","modified":1,"renderable":1},{"_id":"themes/pure/source/css/style.css","path":"css/style.css","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","path":"images/donate/wechatpayimg.png","modified":1,"renderable":1},{"_id":"themes/pure/source/images/donate/alipayimg.png","path":"images/donate/alipayimg.png","modified":1,"renderable":1}],"Cache":[{"_id":"themes/pure/.gitignore","hash":"dbb41a2f30c98cb9de173d82736c46266c901cda","modified":1584414668000},{"_id":"source/.DS_Store","hash":"887ad5fafe05e1433a1095f46a5e43cc54490f04","modified":1584416247000},{"_id":"themes/pure/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1584414668000},{"_id":"themes/pure/README.cn.md","hash":"a634af4addbb57088935e060e8ec6035ea7bab76","modified":1584414668000},{"_id":"themes/pure/README.md","hash":"5861cec81712af9197a210fd5212d007aad8b0de","modified":1584414668000},{"_id":"themes/pure/package.json","hash":"a61723eead5cae2c4d9f0f05cf40d2de7c286fee","modified":1584414668000},{"_id":"source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1584697887000},{"_id":"source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1584455723000},{"_id":"source/_data/test.js","hash":"7405bc90f4fae1668175ac91a8e0285373f6b3c3","modified":1585043003043},{"_id":"source/about/index.md","hash":"abda26dcc68a9991d5ffa6ca621a4ab4b8195650","modified":1584702596000},{"_id":"source/_posts/Android | bug 合集.md","hash":"5f9f4e2294a47bf8e2046d05db6b469017788f15","modified":1585891903142},{"_id":"source/_posts/GitHub | 高效搜索方式.md","hash":"d39597be12c5677b7afeba5b94cacfa51dc8972f","modified":1585805526175},{"_id":"source/_posts/ReactNative | bug 合集.md","hash":"f94434e5fc1dc4f9f12fc5e2896894e9c51bbdf3","modified":1592902211115},{"_id":"source/_posts/gitignore文件配置规则.md","hash":"1214f2046674c708c10df2f2802fbf345aecd3af","modified":1592901830911},{"_id":"source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1584455723000},{"_id":"source/_posts/iOS | bug 合集.md","hash":"5c97aada2f0aeeed41d961f34f1c673e7311d5b5","modified":1585805526175},{"_id":"source/_posts/js | 不常用函数集合.md","hash":"e03998d1010df6c4380e95773ca11e4049972c70","modified":1592901830911},{"_id":"source/_posts/js | 关于js的this指针.md","hash":"81bae1eef495b430040d4bc0becb5352cda09c0e","modified":1592901830912},{"_id":"themes/pure/_config.yml","hash":"11d397c075ea3cd1774d4b1a5930eb3b4aa9c40c","modified":1585032832408},{"_id":"source/_posts/js | 算法题.md","hash":"7c6decd29b78328d214dde61dbc2ce307ff2304c","modified":1585891910679},{"_id":"source/_posts/redux、react-redux、redux-thunk结合使用.md","hash":"a0e155ec429846084d958cf5dfc4097391b91101","modified":1592901830912},{"_id":"source/books/index.md","hash":"10448b4f13f03b681c26fe43bd94d53e9c8e48e0","modified":1584697877000},{"_id":"source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1584459403000},{"_id":"source/links/index.md","hash":"a1e612897fb6e0ddff25c92fef8352beddfd3080","modified":1584697899000},{"_id":"source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1584455723000},{"_id":"source/_posts/js | 有趣的笔试题.md","hash":"f3198d333c363a2e046240e4ee95d94af8133866","modified":1585891919345},{"_id":"source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1584455723000},{"_id":"source/_posts/js | 正则表达式的基本使用.md","hash":"e4533fb30fe9e8b635c81af49eac6c6d41448cf5","modified":1585891925689},{"_id":"themes/pure/languages/zh-CN.yml","hash":"057ebc043f09449af9768791c89c86dfc2938365","modified":1584414668000},{"_id":"themes/pure/_config.yml.example","hash":"4714f87fdb6d4a6ea5ece84f4fe37f922337f14d","modified":1584414668000},{"_id":"themes/pure/languages/default.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1584414668000},{"_id":"themes/pure/languages/zh-TW.yml","hash":"6d27c3114be539b8783ffce944f68b2e26a8c3b9","modified":1584414668000},{"_id":"themes/pure/languages/en.yml","hash":"167ea0db98f4db156ea68c4644f64c0287ae2b6f","modified":1584414668000},{"_id":"themes/pure/layout/about.ejs","hash":"4f5c769e183249b12eb9d3141432bc0039519730","modified":1584414668000},{"_id":"themes/pure/layout/books.ejs","hash":"6c64719cd7071b5319b01339aa524fdaab391385","modified":1584414668000},{"_id":"themes/pure/layout/archive.ejs","hash":"ded5d953b35666e30f4c6e48e2d2c62af8d95ebf","modified":1584414668000},{"_id":"themes/pure/layout/category.ejs","hash":"3ca5651bbce7b0c280c906468f2eb18c2e55ebcb","modified":1584414668000},{"_id":"themes/pure/layout/index.ejs","hash":"07825d8d8b21eb7b694f5585567b9df5c5a91a60","modified":1584414668000},{"_id":"themes/pure/layout/layout.ejs","hash":"a29ab2e881954a252bfc0dc1a7eb5aa52768dd2a","modified":1584414668000},{"_id":"themes/pure/layout/links.ejs","hash":"77c5d1561e2c606c5b3bb39610133d84324074df","modified":1584414668000},{"_id":"themes/pure/layout/page.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1584414668000},{"_id":"themes/pure/layout/post.ejs","hash":"5c27475c176627e6e2e6a16172eb6980e56bcaff","modified":1584414668000},{"_id":"themes/pure/layout/tag.ejs","hash":"df60564c162f7ad3422f8959dfea19351857a7cd","modified":1584414668000},{"_id":"themes/pure/layout/repository.ejs","hash":"fe4b3e051a8b0debe9ee22c2cc2cc935d92ee23f","modified":1584414668000},{"_id":"themes/pure/layout/categories.ejs","hash":"22a2bc1712dd9ba1a3027e875d636132d334fb00","modified":1584414668000},{"_id":"themes/pure/layout/tags.ejs","hash":"29f19a6ed10f8b1f069259a7aeaaacddcfaa2ed4","modified":1584414668000},{"_id":"themes/pure/scripts/thumbnail.js","hash":"e667a611f9baac270281b765832020d50bf8fb7f","modified":1584414668000},{"_id":"themes/pure/source/favicon.png","hash":"d39cad98d4c3baa0de774ddd735fba92f9617c92","modified":1584697265000},{"_id":"themes/pure/screenshot/pure-theme-black.png","hash":"10b40f398af7eb7e8ba2bf2f2a959d8779fc1fe1","modified":1584414668000},{"_id":"themes/pure/screenshot/pure-theme-blue.png","hash":"6146890a68d5ea9d343c48d50151ddd5a2a1872c","modified":1584414668000},{"_id":"themes/pure/screenshot/pure-theme-green.png","hash":"12ec0c6033cb2762839fdf75434bbb4fbf946022","modified":1584414668000},{"_id":"themes/pure/screenshot/pure-theme-purple.png","hash":"9855d2eb0acd23370209354f232471df8f4f72e2","modified":1584414668000},{"_id":"themes/pure/_source/404/index.md","hash":"8d493f624fdd29c8d0266767e56f343d549e16d8","modified":1584414668000},{"_id":"themes/pure/_source/_data/gallery.yml","hash":"e2b3fad87be3d1cfde1effa655d39678ee90907e","modified":1584414668000},{"_id":"themes/pure/_source/categories/index.md","hash":"5d2a4f103d27bebbe3eef1604649d0f5c6d86ac6","modified":1584414668000},{"_id":"themes/pure/_source/about/index.md","hash":"ba1739c1a7605a98d6ceaa4b44e87f3bd3ef2556","modified":1584685428000},{"_id":"themes/pure/_source/_data/links.yml","hash":"aa443a4508550820c77c2a4f6abff1d38ad85054","modified":1584414668000},{"_id":"themes/pure/_source/repository/index.md","hash":"ed0e082c30f233dd5c140d188f1e4bce44bdbf79","modified":1584414668000},{"_id":"themes/pure/_source/links/index.md","hash":"febcf87eb0ab3c5080578275d25f3970bba39625","modified":1584414668000},{"_id":"themes/pure/screenshot/pure.png","hash":"8f4cfd8d7edfa4fbffdf375291302d9807f5cc1c","modified":1584414668000},{"_id":"themes/pure/_source/tags/index.md","hash":"42e9c904ea63b0a7dd4033e2e8f153225bc5cda5","modified":1584414668000},{"_id":"themes/pure/layout/_common/footer.ejs","hash":"cdc48ec70d9202b947f2a9334234d038d7014a7d","modified":1584414668000},{"_id":"themes/pure/layout/_common/script.ejs","hash":"0031114d2a58f8601c2869f78ceedc75a10be90d","modified":1584414668000},{"_id":"themes/pure/layout/_common/social.ejs","hash":"a35a2610e9da762df96587b76b51470507a88cad","modified":1584414668000},{"_id":"themes/pure/layout/_common/head.ejs","hash":"a48ef0fa22712b29ec044b9e5134461f3a21c10d","modified":1584414668000},{"_id":"themes/pure/layout/_common/header.ejs","hash":"3d739d1e2b2991927c08ec222db123830a44a519","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-list.ejs","hash":"c66c86d6a6a90e00494c380603426fc0f4006311","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-post.ejs","hash":"13039fec017332029122ef99901755fcecbfc8ea","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-book.ejs","hash":"977f97f3636947006ad738e502858c46d4cd5ec7","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-tag.ejs","hash":"5de90244c3cedad531cccc03c40e5f9a3aef3c61","modified":1584414668000},{"_id":"themes/pure/layout/_partial/article-about.ejs","hash":"7b80319daeb63401d1745b81cd9a6d1d21a4fb60","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-link.ejs","hash":"fe4d9bf526d8176683cea89b8561ced571374db0","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-repository.ejs","hash":"e39dc762d9fe238cede462532e40eaa3d8651122","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive.ejs","hash":"4d6793f50d41fbd47dc50aa36b24d496006bba6c","modified":1584414668000},{"_id":"themes/pure/layout/_partial/article.ejs","hash":"0f9b71de0087d1f777d92c5a0f3873971aec5a5b","modified":1584414668000},{"_id":"themes/pure/layout/_partial/pagination.ejs","hash":"41a319642da5af07d6cfb8525796aa610b721879","modified":1584414668000},{"_id":"themes/pure/layout/_partial/item-post.ejs","hash":"9f755b0da1ea928dece32c2050d8a04b3a9fb13b","modified":1584414668000},{"_id":"themes/pure/layout/_partial/sidebar-toc.ejs","hash":"152538ceceb0fdef65c46470ebf0189f7b891c5b","modified":1584414668000},{"_id":"themes/pure/layout/_partial/sidebar-about.ejs","hash":"e10ea0176ba87e64888234bafedc01c92544352c","modified":1584414668000},{"_id":"themes/pure/layout/_partial/sidebar.ejs","hash":"2aa8a9f90838e7c105e75e6d3d03cbf860bb1239","modified":1584414668000},{"_id":"themes/pure/layout/_script/analytics.ejs","hash":"e756a81f8c20a187fb863b9689f2f1fa15e2f4e1","modified":1584414668000},{"_id":"themes/pure/layout/_script/comment.ejs","hash":"6f951510bab9dc15474b6664e0329defccf29a30","modified":1584414668000},{"_id":"themes/pure/layout/_script/fancybox.ejs","hash":"8f1be01e70a15b2c31ae57d8c6bce54622ebf8a7","modified":1584414668000},{"_id":"themes/pure/layout/_script/mathjax.ejs","hash":"f618393ab971b2faa80d541f2e6a553d9ace9816","modified":1584414668000},{"_id":"themes/pure/layout/_script/douban.ejs","hash":"143087db0573772b0bdaf7f93312553158942ec7","modified":1584414668000},{"_id":"themes/pure/layout/_partial/archive-category.ejs","hash":"9c364fd6b5172890784141802f5f466241d233fd","modified":1584414668000},{"_id":"themes/pure/layout/_search/baidu.ejs","hash":"67aab280a3ea34429f086cc5c3de7de17727c567","modified":1584414668000},{"_id":"themes/pure/layout/_script/repository.ejs","hash":"14f2e7d4c1055ff6a5f5867dc0e9a9f6f4c28fe1","modified":1584414668000},{"_id":"themes/pure/layout/_script/pv.ejs","hash":"fb9b5f16029f2ccef4b83cf4facfdcdd748b65b4","modified":1584414668000},{"_id":"themes/pure/layout/_search/index-mobile.ejs","hash":"c726e234c0166da69fdfbd3dd613a5eaf4c80258","modified":1584414668000},{"_id":"themes/pure/layout/_search/index.ejs","hash":"f8d5a9c3f777250f5fb6512bba585307f784d5cd","modified":1584414668000},{"_id":"themes/pure/layout/_search/insight.ejs","hash":"4af3e92ef98bedba9680d45699cb04dde4640536","modified":1584414668000},{"_id":"themes/pure/layout/_search/swiftype.ejs","hash":"4baeca36e410181300ae7d47ba1fb4755bcfcff0","modified":1584414668000},{"_id":"themes/pure/layout/_widget/archive.ejs","hash":"af8ad7f62877764b75d5272d9d899fd6c8e3845c","modified":1584414668000},{"_id":"themes/pure/layout/_widget/board.ejs","hash":"acd27451be52703e670ce0b313f2da6fa24071e4","modified":1584414668000},{"_id":"themes/pure/layout/_widget/category.ejs","hash":"331b7642a0f58b9088b937436ab39076a4c5dd7e","modified":1584414668000},{"_id":"themes/pure/layout/_widget/tag.ejs","hash":"487628925da5fcac91463cdad3d9e55d071bd5ed","modified":1584414668000},{"_id":"themes/pure/layout/_widget/recent_posts.ejs","hash":"8942d60311797a591ba2d157c5cdd23e85ceb694","modified":1584414668000},{"_id":"themes/pure/layout/_widget/tagcloud.ejs","hash":"3291108e5411c48b2c5b3e17adace6ffa90d1c29","modified":1584414668000},{"_id":"themes/pure/layout/_script/search.ejs","hash":"7be33dc260ce788aa1a2cd3bd0386d95057533cb","modified":1584414668000},{"_id":"themes/pure/_source/books/index.md","hash":"cf4163959c23244059cbbbc1c0fe379cc3b2cb73","modified":1584414668000},{"_id":"themes/pure/source/fonts/README.md","hash":"c5772b99ad81291fb137b330813f866bdceea0a3","modified":1584414668000},{"_id":"themes/pure/source/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1584414668000},{"_id":"themes/pure/source/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1584414668000},{"_id":"themes/pure/source/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1584414668000},{"_id":"themes/pure/source/images/avatar.jpg","hash":"d39cad98d4c3baa0de774ddd735fba92f9617c92","modified":1584697208000},{"_id":"themes/pure/source/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1584414668000},{"_id":"themes/pure/source/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1584414668000},{"_id":"themes/pure/source/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1584414668000},{"_id":"themes/pure/source/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1584414668000},{"_id":"themes/pure/source/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/category.ejs","hash":"fcee6b4aef8b6c4627831ff8dbb2d73478511426","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/date.ejs","hash":"7d4979652998abf92a64bfae8157b70d6e514057","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/comment.ejs","hash":"3c0da69fcea6ccfd97b82d50e740107a88eec5c4","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/copyright.ejs","hash":"a9d3d05428e5844a07706c7fcfeb842e44a36a64","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/donate.ejs","hash":"a251dc34d660601a2e8b7d98b3bfe2b9023dbbce","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/pv.ejs","hash":"ec3ccf322432afc2761f860c5a3000ac34d46e4c","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/nav.ejs","hash":"95eabc0fe4033ec61b240a16eeaf7dc62a9e3da1","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/tag.ejs","hash":"39f53ead07f75c181a7ba93e586dd1b8171620f1","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/thumbnail.ejs","hash":"080d5c5f3e95accf51893a7092695fe32d34a087","modified":1584414668000},{"_id":"themes/pure/layout/_partial/post/wordcount.ejs","hash":"bd06c4c8449ed96aabf655fe1ae3be1f0707b81e","modified":1584414668000},{"_id":"themes/pure/source/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1584414668000},{"_id":"themes/pure/layout/_script/_analytics/baidu-analytics.ejs","hash":"f314be7860c1d5930f1600d010e3120ba5c85325","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/disqus.ejs","hash":"a051e3eddc75586e69131c29ab8c89d69626e0fd","modified":1584414668000},{"_id":"themes/pure/layout/_script/_analytics/google-analytics.ejs","hash":"54f1dc9375cbdb65464e0ac1b58847aa5e8bc6a5","modified":1584414668000},{"_id":"themes/pure/layout/_script/_analytics/tencent-analytics.ejs","hash":"77defb41a1613a758ff5a6a5128c6107fc584190","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/livere.ejs","hash":"5ab997d5ee4475d2f89f882fab4a52648dbe0e30","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/gitment.ejs","hash":"a64852076483395738a398deb4c10bdb0f3b7b71","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/youyan.ejs","hash":"095649a173573d03b5845c2e331ec7be976b152a","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/valine.ejs","hash":"acf81f9a59dc45f197d723f70484de5fcd166577","modified":1584414668000},{"_id":"themes/pure/layout/_script/_search/baidu.ejs","hash":"9b60ffa2e2725a993e9cecfb81ddedd9b9361011","modified":1584414668000},{"_id":"themes/pure/layout/_script/_search/insight.ejs","hash":"3543c11d060feaf9381b5d87564b01ffef0e0a59","modified":1584414668000},{"_id":"themes/pure/layout/_script/_comment/gitalk.ejs","hash":"fb01f1631c3ae7fe6211dc03233506cb344229be","modified":1584414668000},{"_id":"themes/pure/source/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1584414668000},{"_id":"themes/pure/source/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1584414668000},{"_id":"themes/pure/source/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1584414668000},{"_id":"themes/pure/source/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1584414668000},{"_id":"themes/pure/source/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1584414668000},{"_id":"themes/pure/source/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1584414668000},{"_id":"themes/pure/source/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1584414668000},{"_id":"themes/pure/source/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1584414668000},{"_id":"themes/pure/source/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1584414668000},{"_id":"themes/pure/source/images/donate/wechatpayimg.png","hash":"f16440d9d71989ec5e9ff7cb6ebc9119fd7c22bf","modified":1584684848000},{"_id":"themes/pure/source/images/donate/alipayimg.png","hash":"3edf95f56d81fa3f872af2ad525ea10b8246ea87","modified":1584684848000},{"_id":"themes/pure/screenshot/pure.psd","hash":"a31cea40b45bdc31f051fca2f1e2f4ecbaee1a94","modified":1584414668000},{"_id":"public/baidusitemap.xml","hash":"95dd0348481531a7454e7b3a90a980ea032e2ae5","modified":1592902219057},{"_id":"public/atom.xml","hash":"4a789a7d53c8540e5495fbd7ab002b9db7e7c06b","modified":1592902219057},{"_id":"public/content.json","hash":"af271f18833ad357febce62b97a4aa5ffd17cc83","modified":1592902219057},{"_id":"public/sitemap.xml","hash":"579d5be119eb67d3df93d7026c33583f4c1370c9","modified":1592902219057},{"_id":"public/about/index.html","hash":"5015cf0896090570b0e5e1b3510c630cdc964d36","modified":1592902219057},{"_id":"public/archives/page/2/index.html","hash":"9387b16d63dbe9b8f8864a025f0a72e09c2c6190","modified":1592902219057},{"_id":"public/archives/2020/page/2/index.html","hash":"87601b173067ccfbf55b47ca87339efdcc757f48","modified":1592902219057},{"_id":"public/archives/2020/05/index.html","hash":"58ebd01046cc25ef487a0cf671c4c6f416ad2613","modified":1592902219057},{"_id":"public/categories/高效操作/index.html","hash":"cd794337b1da90a6181f5ca62e9bfb1e89bebc98","modified":1592902219057},{"_id":"public/categories/iOS/index.html","hash":"06541408513f1fa898d31d51d44e0e4ced0122f9","modified":1592902219057},{"_id":"public/categories/Android/index.html","hash":"d6bbcdc6b973b3697e764cb8e5c6126077234f23","modified":1592902219057},{"_id":"public/categories/js/index.html","hash":"aa6ca5537dd77ce6d70ac23be77c42b51c2d5454","modified":1592902219057},{"_id":"public/categories/算法/index.html","hash":"0136097b5f50332d3b210ce45bd91f13a392145e","modified":1592902219057},{"_id":"public/categories/编程通用/index.html","hash":"4a1037d4a13b2b2d902b4e2739205499bf8b5888","modified":1592902219057},{"_id":"public/tags/github/index.html","hash":"d7e39ad3b7045d1812f519796f286a03fbe1edd5","modified":1592902219057},{"_id":"public/tags/效率/index.html","hash":"689216642dba3fc4c9dd84d385daff96b8d65316","modified":1592902219057},{"_id":"public/tags/Android/index.html","hash":"be2d8f00cc99993107160fa37402b009454d2464","modified":1592902219057},{"_id":"public/tags/算法/index.html","hash":"447a33787c623a5726f23214253102f13a2286d7","modified":1592902219057},{"_id":"public/tags/基础/index.html","hash":"3ecfca15a6df5d92d592e8f46b6c88cd44bd54b2","modified":1592902219057},{"_id":"public/404.html","hash":"2057e108c206bd1a9aff802244c27ec06ef97a0c","modified":1592902219057},{"_id":"public/books/index.html","hash":"9edb424dd680bc48250de7a28a35008e1d869038","modified":1592902219057},{"_id":"public/categories/index.html","hash":"9b2a60d51bb261d2ffbcc510b909f3ef0ab48e18","modified":1592902219057},{"_id":"public/links/index.html","hash":"9199aa718fc3eb3aff60cf583f81d408bedb6156","modified":1592902219057},{"_id":"public/repository/index.html","hash":"7914d4985581464a7da5d7aad4740c795c238552","modified":1592902219057},{"_id":"public/tags/index.html","hash":"dafa65936debcf95081b047490629d82ce9f497b","modified":1592902219057},{"_id":"public/2020/05/12/js | 不常用函数集合/index.html","hash":"7861a7f33d4b265bdf2dde317aafbaf976c82be1","modified":1592902219057},{"_id":"public/2020/05/09/gitignore文件配置规则/index.html","hash":"8017b61106aa779e1844f80eaa6370c35e2a4b62","modified":1592902219057},{"_id":"public/2020/05/08/redux、react-redux、redux-thunk结合使用/index.html","hash":"44bb6b2aa85092a8852e4870cfa01a959f1ec86c","modified":1592902219057},{"_id":"public/2020/03/29/ReactNative | bug 合集/index.html","hash":"9282d61dd7ec2e2dbf827768fb519b71f7a444e2","modified":1592902219057},{"_id":"public/2020/03/29/iOS | bug 合集/index.html","hash":"048f10ca040a2f59c935170f90661add601aefe2","modified":1592902219057},{"_id":"public/2020/03/26/Android | bug 合集/index.html","hash":"6e6656cfbb9b2ba96e0d6078849508d780527fc6","modified":1592902219057},{"_id":"public/2020/03/24/js | 算法题/index.html","hash":"9e13f4920c93e7b7e75c139b1023b3a5bddab9c5","modified":1592902219057},{"_id":"public/2020/03/24/js | 有趣的笔试题/index.html","hash":"8e62673f134e4be2e3015d307f4c6d456dca7444","modified":1592902219057},{"_id":"public/2020/03/23/js | 关于js的this指针/index.html","hash":"48f6a92b994924b1633908ccbf6ce8437907e54a","modified":1592902219057},{"_id":"public/2020/03/21/GitHub | 高效搜索方式/index.html","hash":"61f8d0faab320bcf638fd54e2a2ad7e9dda37fac","modified":1592902219057},{"_id":"public/2020/03/20/js | 正则表达式的基本使用/index.html","hash":"ac3fab245aaf23ba0ec7ecf4792a35e1357539e3","modified":1592902219057},{"_id":"public/archives/index.html","hash":"d3c6334ab50cd31c4694c5d1ccb44dfe0cd2ad67","modified":1592902219057},{"_id":"public/archives/2020/index.html","hash":"30f9d90f572c6188f909b2543a01b01bb086d318","modified":1592902219057},{"_id":"public/archives/2020/03/index.html","hash":"ac689b3f29d625f761a342ee643d97e00097b87a","modified":1592902219057},{"_id":"public/index.html","hash":"582a9e47bae802a44125058924ece371d45ef165","modified":1592902219057},{"_id":"public/page/2/index.html","hash":"63bf5e22fa8b0e4e8cead541036b65fd6c27bcd5","modified":1592902219057},{"_id":"public/tags/js/index.html","hash":"f5960fb4569ee43473c393b71979c304fdccc22f","modified":1592902219057},{"_id":"public/fonts/iconfont.woff","hash":"78d29194287b8885d25212048c4f787705212a6e","modified":1592902219057},{"_id":"public/fonts/iconfont.eot","hash":"6819d9bb643bdeafc17bfecb0746ae641b018fdf","modified":1592902219057},{"_id":"public/fonts/iconfont.ttf","hash":"9b8837f9f79cf6ab794736301d0665345183a20c","modified":1592902219057},{"_id":"public/images/avatar.jpg","hash":"d39cad98d4c3baa0de774ddd735fba92f9617c92","modified":1592902219057},{"_id":"public/images/thumb-default.png","hash":"e8403b97ed9251f9f5207765b0ce796c5000b4ba","modified":1592902219057},{"_id":"public/images/xingqiu-qrcode.jpg","hash":"ef2c2848dc79db6df7c752510651ed8ba57f2daf","modified":1592902219057},{"_id":"public/images/favatar/chuangzaoshi-logo.png","hash":"7fa5734072050952159a02d330bbc008b5a99122","modified":1592902219057},{"_id":"public/images/favatar/idesign-logo.png","hash":"6b150a2dbb9912b7a7662255c27e4d4baaecee71","modified":1592902219057},{"_id":"public/images/favatar/SzsFox-logo.png","hash":"d71fcc73b7bc2a439d8c7ba461137856d190bd76","modified":1592902219057},{"_id":"public/favicon.png","hash":"d39cad98d4c3baa0de774ddd735fba92f9617c92","modified":1592902219057},{"_id":"public/js/application.js","hash":"46d1fb207ce5f0acb83803f927985dfcea86f9ef","modified":1592902219057},{"_id":"public/js/application.min.js","hash":"34d765e982c7d6360c37f82202d99f63ac40e408","modified":1592902219057},{"_id":"public/js/insight.js","hash":"298e8ca42517984bd26f34caa4c45560b0e909ad","modified":1592902219057},{"_id":"public/fonts/README.html","hash":"7c1128fed284d2fb7fee743e8a739da99385b358","modified":1592902219057},{"_id":"public/js/plugin.min.js","hash":"07fe34638f9832702c5f81d8583c5e4e8b3d9659","modified":1592902219057},{"_id":"public/css/style.min.css","hash":"1d23abc76726ebe042f7df4749f00f8f73338444","modified":1592902219057},{"_id":"public/js/jquery.min.js","hash":"5a9dcfbef655a2668e78baebeaa8dc6f41d8dabb","modified":1592902219057},{"_id":"public/js/plugin.js","hash":"a8524d42b8621bfaa06602a163c6a1f82702b91d","modified":1592902219057},{"_id":"public/css/style.css","hash":"3b693ce41c2e35ece4773593e94b4c17aeaee02f","modified":1592902219057},{"_id":"public/fonts/iconfont.svg","hash":"25929e6e74f7027acd1f6467a67e95b153bcd8d5","modified":1592902219057},{"_id":"public/js/plugin.js.map","hash":"1730c0cc660f863120aca0a439d7264e2e245fc5","modified":1592902219057},{"_id":"public/images/donate/wechatpayimg.png","hash":"f16440d9d71989ec5e9ff7cb6ebc9119fd7c22bf","modified":1592902219057},{"_id":"public/images/donate/alipayimg.png","hash":"3edf95f56d81fa3f872af2ad525ea10b8246ea87","modified":1592902219057}],"Category":[{"name":"高效操作","_id":"ckbrouqtr00041losadgig96e"},{"name":"iOS","_id":"ckbrouqtx000d1losd4mg8m0j"},{"name":"Android","_id":"ckbrouqu2000l1loshup9gj2b"},{"name":"js","_id":"ckbrouqu5000s1los8p3w3cd6"},{"name":"算法","_id":"ckbrouqu6000x1losd85s9v58"},{"name":"编程通用","_id":"ckbrouqu800111los9l5vaxtm"}],"Data":[{"_id":"gallery","data":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}}},{"_id":"test","data":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n"},{"_id":"links","data":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}],"Page":[{"title":"404 Not Found：该页无法显示","toc":false,"comments":0,"_content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","source":"404/index.md","raw":"---\ntitle: 404 Not Found：该页无法显示\ntoc: false\ncomments: false\npermalink: /404\n---\n<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","date":"2020-03-23T03:58:59.256Z","updated":"2020-03-20T09:51:27.000Z","path":"/404.html","layout":"page","_id":"ckbrouqtb00001los9v5723yk","content":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<script type=\"text/javascript\" src=\"//www.qq.com/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"<%- config.url %>\" homePageName=\"回到我的主页\"></script>\n"},{"title":"关于","description":"个人简介","layout":"about","comments":0,"sidebar":"custom","_content":" 我热爱的不是编程，我热爱的只是工作","source":"about/index.md","raw":"---\ntitle: 关于\ndescription: 个人简介\nlayout: about\ncomments: false\nsidebar: custom\n---\n 我热爱的不是编程，我热爱的只是工作","date":"2020-03-23T03:58:59.262Z","updated":"2020-03-20T11:09:56.000Z","path":"about/index.html","_id":"ckbrouqtj00021losfxjx0jh7","content":"<p> 我热爱的不是编程，我热爱的只是工作</p>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p> 我热爱的不是编程，我热爱的只是工作</p>\n"},{"title":"书单","layout":"books","comments":0,"sidebar":"none","_content":"\n","source":"books/index.md","raw":"---\ntitle: 书单\nlayout: books\ncomments: false\nsidebar: none\n---\n\n","date":"2020-03-23T03:58:59.263Z","updated":"2020-03-20T09:51:17.000Z","path":"books/index.html","_id":"ckbrouqts00061losedqmgzn8","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"分类","layout":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\nlayout: categories\ncomments: false\n---\n","date":"2020-03-23T03:58:59.264Z","updated":"2020-03-17T15:36:43.000Z","path":"categories/index.html","_id":"ckbrouqtt00081losgm880g3a","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"友情链接","layout":"links","comments":1,"sidebar":"none","_content":"","source":"links/index.md","raw":"---\ntitle: 友情链接\nlayout: links\ncomments: true\nsidebar: none\n---\n","date":"2020-03-23T03:58:59.265Z","updated":"2020-03-20T09:51:39.000Z","path":"links/index.html","_id":"ckbrouqtv000a1losfszc0sc6","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"Repositories","layout":"repository","comments":0,"sidebar":"none","_content":"","source":"repository/index.md","raw":"---\ntitle: Repositories\nlayout: repository\ncomments: false\nsidebar: none\n---\n","date":"2020-03-23T03:58:59.266Z","updated":"2020-03-17T14:35:23.000Z","path":"repository/index.html","_id":"ckbrouqtx000e1los4mj11srg","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"标签","layout":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\nlayout: tags\ncomments: false\n---\n","date":"2020-03-23T03:58:59.268Z","updated":"2020-03-17T14:35:23.000Z","path":"tags/index.html","_id":"ckbrouqtz000g1losbmyc5abf","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""}],"Post":[{"title":"提高github搜索精确度","date":"2020-03-21T00:24:58.000Z","comments":1,"_content":"\n```\n// xxx 代表搜索内容\n// 在项目名进行精确搜索\nin:name xxx\n\n// 搜索名字包含xxx，stars数量大于3000的项目\nin:name xxx stars:>3000\n\n// 搜索名字包含xxx，forks大于100的项目\nin:name xxx forks:>100\n\n// 搜索readme包含xxx的项目\nin:readme xxx\n\n// 搜索描述包含xxx的项目\nin:description xxx\n\n// 搜索xxx语言编写，名字包含xxx的项目\nin:name xxx language:xxx\n\n// 搜索最后一次更细时间在2019年9月3日之后的项目\nxxx pushed:>2019-09-03\n\n// \n```","source":"_posts/GitHub | 高效搜索方式.md","raw":"---\ntitle: 提高github搜索精确度\ndate: 2020-03-21 08:24:58\ncategories: 高效操作\ntags: [github,效率]\ncomments: true\n---\n\n```\n// xxx 代表搜索内容\n// 在项目名进行精确搜索\nin:name xxx\n\n// 搜索名字包含xxx，stars数量大于3000的项目\nin:name xxx stars:>3000\n\n// 搜索名字包含xxx，forks大于100的项目\nin:name xxx forks:>100\n\n// 搜索readme包含xxx的项目\nin:readme xxx\n\n// 搜索描述包含xxx的项目\nin:description xxx\n\n// 搜索xxx语言编写，名字包含xxx的项目\nin:name xxx language:xxx\n\n// 搜索最后一次更细时间在2019年9月3日之后的项目\nxxx pushed:>2019-09-03\n\n// \n```","slug":"GitHub | 高效搜索方式","published":1,"updated":"2020-04-02T05:32:06.175Z","layout":"post","photos":[],"link":"","_id":"ckbrouqtf00011losah01642r","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; xxx 代表搜索内容</span><br><span class=\"line\">&#x2F;&#x2F; 在项目名进行精确搜索</span><br><span class=\"line\">in:name xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索名字包含xxx，stars数量大于3000的项目</span><br><span class=\"line\">in:name xxx stars:&gt;3000</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索名字包含xxx，forks大于100的项目</span><br><span class=\"line\">in:name xxx forks:&gt;100</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索readme包含xxx的项目</span><br><span class=\"line\">in:readme xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索描述包含xxx的项目</span><br><span class=\"line\">in:description xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索xxx语言编写，名字包含xxx的项目</span><br><span class=\"line\">in:name xxx language:xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索最后一次更细时间在2019年9月3日之后的项目</span><br><span class=\"line\">xxx pushed:&gt;2019-09-03</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; xxx 代表搜索内容</span><br><span class=\"line\">&#x2F;&#x2F; 在项目名进行精确搜索</span><br><span class=\"line\">in:name xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索名字包含xxx，stars数量大于3000的项目</span><br><span class=\"line\">in:name xxx stars:&gt;3000</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索名字包含xxx，forks大于100的项目</span><br><span class=\"line\">in:name xxx forks:&gt;100</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索readme包含xxx的项目</span><br><span class=\"line\">in:readme xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索描述包含xxx的项目</span><br><span class=\"line\">in:description xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索xxx语言编写，名字包含xxx的项目</span><br><span class=\"line\">in:name xxx language:xxx</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 搜索最后一次更细时间在2019年9月3日之后的项目</span><br><span class=\"line\">xxx pushed:&gt;2019-09-03</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>"},{"title":"ReactNative | bug 合集","date":"2020-03-29T05:27:39.000Z","comments":1,"_content":"\n1. iOS xcode11 以上运行报错 `Unknown argument type ‘attribute’ in method -[RCTAppState getCurrentAppState:error:]. Extend RCTConvert to support this type.`\n\n   > // 解决方案一： 升级 RN 版本到 0.59.9 以上\n   > // 解决方案二： `[project_folder]/node_modules/react-native/React/Base/RCTModuleMethod.mm` 文件 第 91 行 `return RCTReadString(input, \"__attribute__((unused))\") ||`后面添加\n   > `RCTReadString(input, \"__attribute__((__unused__))\") ||` 这一行\n\n2. Xcode 编译项目时出现 config.h not found\n\n   > 原因：Xcode 文件引用出现问题\n   > 解决方法：终端项目目录下执行以下两个指令\n   > node_modules/react-native/third-party/glog-0.3.4\n   > ../../scripts/ios-configure-glog.sh\n\n3. 运行项目突然出现 Make sure you are running a packager server or have included a.bundle file in your application bundle\n   > 原因：vpn 开了全局代理，导致找不到项目的 jsbundle 包\n   > 解决方法：关闭全局代理即可\n4. 终端运行 react-native run-ios 报 could not found iPhone6\n\n   > 原因：Xcode 版本过高，React-Native 版本过低\n   > 解决方法：\n\n   ```打开 node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js 文件\n   if (!version.startsWith('iOS') && !version.startsWith('tvOS'))\n   改为\n   if (!version.startsWith('com.apple.CoreSimulator.SimRuntime.iOS') && !version.startsWith('com.apple.CoreSimulator.SimRuntime.tvOS'))\n   ```\n\n5. React-Native 向 Web 页面注入代码，调用 window.postMessage() 出现 Setting onMessage on a WebView overrides existing values of window.postMessage, but a previous value was defined\n\n   > 原因：未知\n   > 解决方法：\n\n   ```\n\n   render() {\n   const patchPostMessageFunction = function() {\n   var originalPostMessage = window.postMessage;\n\n               var patchedPostMessage = function(message, targetOrigin, transfer) {\n               originalPostMessage(message, targetOrigin, transfer);\n               };\n               patchedPostMessage.toString = function() {\n               return String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage');\n               };\n\n               window.postMessage = patchedPostMessage;\n               // 这里加入要注入到webview的逻辑\n\n           };\n           const patchPostMessageJsCode = '(' + String(patchPostMessageFunction) + ')();';\n\n           return (\n               <WebView injectedJavaScript={patchPostMessageJsCode}/>\n           )\n       }\n\n   ```\n\n   6. iOS 无法输入中文的问题\n\n   ```\n   import React, { Component } from 'react'\n   import { Platform, TextInput } from 'react-native'\n\n   export default class LLTextInput extends Component {\n\n      shouldComponentUpdate (nextProps){\n         return Platform.OS !== 'ios'\n               || (this.props.value === nextProps.value && (nextProps.defaultValue == undefined || nextProps.defaultValue == '' ))\n               || (this.props.defaultValue === nextProps.defaultValue && (nextProps.value == undefined || nextProps.value == '' ))\n      }\n      render() {\n         return <TextInput {...this.props} />\n      }\n   }\n\n   ```\n\n6. android 打包报错 `Expected a name but was STRING at line 1 column 99 path $[0].apkInfo.versionName`\n   > 把打包路径上的文件夹给删了，然后再打包就好了。\n   > 比如我的 apk 是存储在 E:\\apk\\release 这个路径,然后我就把 release 文件夹给删除了，然后重新打包就好了。\n   > 或者你也可以更换一下你的打包路径也可以哦。\n","source":"_posts/ReactNative | bug 合集.md","raw":"---\ntitle: ReactNative | bug 合集\ndate: 2020-03-29 13:27:39\ncategories:\ntags: []\ncomments: true\n---\n\n1. iOS xcode11 以上运行报错 `Unknown argument type ‘attribute’ in method -[RCTAppState getCurrentAppState:error:]. Extend RCTConvert to support this type.`\n\n   > // 解决方案一： 升级 RN 版本到 0.59.9 以上\n   > // 解决方案二： `[project_folder]/node_modules/react-native/React/Base/RCTModuleMethod.mm` 文件 第 91 行 `return RCTReadString(input, \"__attribute__((unused))\") ||`后面添加\n   > `RCTReadString(input, \"__attribute__((__unused__))\") ||` 这一行\n\n2. Xcode 编译项目时出现 config.h not found\n\n   > 原因：Xcode 文件引用出现问题\n   > 解决方法：终端项目目录下执行以下两个指令\n   > node_modules/react-native/third-party/glog-0.3.4\n   > ../../scripts/ios-configure-glog.sh\n\n3. 运行项目突然出现 Make sure you are running a packager server or have included a.bundle file in your application bundle\n   > 原因：vpn 开了全局代理，导致找不到项目的 jsbundle 包\n   > 解决方法：关闭全局代理即可\n4. 终端运行 react-native run-ios 报 could not found iPhone6\n\n   > 原因：Xcode 版本过高，React-Native 版本过低\n   > 解决方法：\n\n   ```打开 node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js 文件\n   if (!version.startsWith('iOS') && !version.startsWith('tvOS'))\n   改为\n   if (!version.startsWith('com.apple.CoreSimulator.SimRuntime.iOS') && !version.startsWith('com.apple.CoreSimulator.SimRuntime.tvOS'))\n   ```\n\n5. React-Native 向 Web 页面注入代码，调用 window.postMessage() 出现 Setting onMessage on a WebView overrides existing values of window.postMessage, but a previous value was defined\n\n   > 原因：未知\n   > 解决方法：\n\n   ```\n\n   render() {\n   const patchPostMessageFunction = function() {\n   var originalPostMessage = window.postMessage;\n\n               var patchedPostMessage = function(message, targetOrigin, transfer) {\n               originalPostMessage(message, targetOrigin, transfer);\n               };\n               patchedPostMessage.toString = function() {\n               return String(Object.hasOwnProperty).replace('hasOwnProperty', 'postMessage');\n               };\n\n               window.postMessage = patchedPostMessage;\n               // 这里加入要注入到webview的逻辑\n\n           };\n           const patchPostMessageJsCode = '(' + String(patchPostMessageFunction) + ')();';\n\n           return (\n               <WebView injectedJavaScript={patchPostMessageJsCode}/>\n           )\n       }\n\n   ```\n\n   6. iOS 无法输入中文的问题\n\n   ```\n   import React, { Component } from 'react'\n   import { Platform, TextInput } from 'react-native'\n\n   export default class LLTextInput extends Component {\n\n      shouldComponentUpdate (nextProps){\n         return Platform.OS !== 'ios'\n               || (this.props.value === nextProps.value && (nextProps.defaultValue == undefined || nextProps.defaultValue == '' ))\n               || (this.props.defaultValue === nextProps.defaultValue && (nextProps.value == undefined || nextProps.value == '' ))\n      }\n      render() {\n         return <TextInput {...this.props} />\n      }\n   }\n\n   ```\n\n6. android 打包报错 `Expected a name but was STRING at line 1 column 99 path $[0].apkInfo.versionName`\n   > 把打包路径上的文件夹给删了，然后再打包就好了。\n   > 比如我的 apk 是存储在 E:\\apk\\release 这个路径,然后我就把 release 文件夹给删除了，然后重新打包就好了。\n   > 或者你也可以更换一下你的打包路径也可以哦。\n","slug":"ReactNative | bug 合集","published":1,"updated":"2020-06-23T08:50:11.115Z","layout":"post","photos":[],"link":"","_id":"ckbrouqtk00031los81rygnt9","content":"<ol>\n<li><p>iOS xcode11 以上运行报错 <code>Unknown argument type ‘attribute’ in method -[RCTAppState getCurrentAppState:error:]. Extend RCTConvert to support this type.</code></p>\n<blockquote>\n<p>// 解决方案一： 升级 RN 版本到 0.59.9 以上<br>// 解决方案二： <code>[project_folder]/node_modules/react-native/React/Base/RCTModuleMethod.mm</code> 文件 第 91 行 <code>return RCTReadString(input, &quot;__attribute__((unused))&quot;) ||</code>后面添加<br><code>RCTReadString(input, &quot;__attribute__((__unused__))&quot;) ||</code> 这一行</p>\n</blockquote>\n</li>\n<li><p>Xcode 编译项目时出现 config.h not found</p>\n<blockquote>\n<p>原因：Xcode 文件引用出现问题<br>解决方法：终端项目目录下执行以下两个指令<br>node_modules/react-native/third-party/glog-0.3.4<br>../../scripts/ios-configure-glog.sh</p>\n</blockquote>\n</li>\n<li><p>运行项目突然出现 Make sure you are running a packager server or have included a.bundle file in your application bundle</p>\n<blockquote>\n<p>原因：vpn 开了全局代理，导致找不到项目的 jsbundle 包<br>解决方法：关闭全局代理即可</p>\n</blockquote>\n</li>\n<li><p>终端运行 react-native run-ios 报 could not found iPhone6</p>\n<blockquote>\n<p>原因：Xcode 版本过高，React-Native 版本过低<br>解决方法：</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js 文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!version.startsWith(&#39;iOS&#39;) &amp;&amp; !version.startsWith(&#39;tvOS&#39;))</span><br><span class=\"line\">改为</span><br><span class=\"line\">if (!version.startsWith(&#39;com.apple.CoreSimulator.SimRuntime.iOS&#39;) &amp;&amp; !version.startsWith(&#39;com.apple.CoreSimulator.SimRuntime.tvOS&#39;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>React-Native 向 Web 页面注入代码，调用 window.postMessage() 出现 Setting onMessage on a WebView overrides existing values of window.postMessage, but a previous value was defined</p>\n<blockquote>\n<p>原因：未知<br>解决方法：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">const patchPostMessageFunction &#x3D; function() &#123;</span><br><span class=\"line\">var originalPostMessage &#x3D; window.postMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">            var patchedPostMessage &#x3D; function(message, targetOrigin, transfer) &#123;</span><br><span class=\"line\">            originalPostMessage(message, targetOrigin, transfer);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            patchedPostMessage.toString &#x3D; function() &#123;</span><br><span class=\"line\">            return String(Object.hasOwnProperty).replace(&#39;hasOwnProperty&#39;, &#39;postMessage&#39;);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            window.postMessage &#x3D; patchedPostMessage;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里加入要注入到webview的逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const patchPostMessageJsCode &#x3D; &#39;(&#39; + String(patchPostMessageFunction) + &#39;)();&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;WebView injectedJavaScript&#x3D;&#123;patchPostMessageJsCode&#125;&#x2F;&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>iOS 无法输入中文的问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#123; Platform, TextInput &#125; from &#39;react-native&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class LLTextInput extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   shouldComponentUpdate (nextProps)&#123;</span><br><span class=\"line\">      return Platform.OS !&#x3D;&#x3D; &#39;ios&#39;</span><br><span class=\"line\">            || (this.props.value &#x3D;&#x3D;&#x3D; nextProps.value &amp;&amp; (nextProps.defaultValue &#x3D;&#x3D; undefined || nextProps.defaultValue &#x3D;&#x3D; &#39;&#39; ))</span><br><span class=\"line\">            || (this.props.defaultValue &#x3D;&#x3D;&#x3D; nextProps.defaultValue &amp;&amp; (nextProps.value &#x3D;&#x3D; undefined || nextProps.value &#x3D;&#x3D; &#39;&#39; ))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">      return &lt;TextInput &#123;...this.props&#125; &#x2F;&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>android 打包报错 <code>Expected a name but was STRING at line 1 column 99 path $[0].apkInfo.versionName</code></p>\n<blockquote>\n<p>把打包路径上的文件夹给删了，然后再打包就好了。<br>比如我的 apk 是存储在 E:\\apk\\release 这个路径,然后我就把 release 文件夹给删除了，然后重新打包就好了。<br>或者你也可以更换一下你的打包路径也可以哦。</p>\n</blockquote>\n</li>\n</ol>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<ol>\n<li><p>iOS xcode11 以上运行报错 <code>Unknown argument type ‘attribute’ in method -[RCTAppState getCurrentAppState:error:]. Extend RCTConvert to support this type.</code></p>\n<blockquote>\n<p>// 解决方案一： 升级 RN 版本到 0.59.9 以上<br>// 解决方案二： <code>[project_folder]/node_modules/react-native/React/Base/RCTModuleMethod.mm</code> 文件 第 91 行 <code>return RCTReadString(input, &quot;__attribute__((unused))&quot;) ||</code>后面添加<br><code>RCTReadString(input, &quot;__attribute__((__unused__))&quot;) ||</code> 这一行</p>\n</blockquote>\n</li>\n<li><p>Xcode 编译项目时出现 config.h not found</p>\n<blockquote>\n<p>原因：Xcode 文件引用出现问题<br>解决方法：终端项目目录下执行以下两个指令<br>node_modules/react-native/third-party/glog-0.3.4<br>../../scripts/ios-configure-glog.sh</p>\n</blockquote>\n</li>\n<li><p>运行项目突然出现 Make sure you are running a packager server or have included a.bundle file in your application bundle</p>\n<blockquote>\n<p>原因：vpn 开了全局代理，导致找不到项目的 jsbundle 包<br>解决方法：关闭全局代理即可</p>\n</blockquote>\n</li>\n<li><p>终端运行 react-native run-ios 报 could not found iPhone6</p>\n<blockquote>\n<p>原因：Xcode 版本过高，React-Native 版本过低<br>解决方法：</p>\n</blockquote>\n<figure class=\"highlight plain\"><figcaption><span>node_modules/react-native/local-cli/runIOS/findMatchingSimulator.js 文件</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if (!version.startsWith(&#39;iOS&#39;) &amp;&amp; !version.startsWith(&#39;tvOS&#39;))</span><br><span class=\"line\">改为</span><br><span class=\"line\">if (!version.startsWith(&#39;com.apple.CoreSimulator.SimRuntime.iOS&#39;) &amp;&amp; !version.startsWith(&#39;com.apple.CoreSimulator.SimRuntime.tvOS&#39;))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>React-Native 向 Web 页面注入代码，调用 window.postMessage() 出现 Setting onMessage on a WebView overrides existing values of window.postMessage, but a previous value was defined</p>\n<blockquote>\n<p>原因：未知<br>解决方法：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">const patchPostMessageFunction &#x3D; function() &#123;</span><br><span class=\"line\">var originalPostMessage &#x3D; window.postMessage;</span><br><span class=\"line\"></span><br><span class=\"line\">            var patchedPostMessage &#x3D; function(message, targetOrigin, transfer) &#123;</span><br><span class=\"line\">            originalPostMessage(message, targetOrigin, transfer);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\">            patchedPostMessage.toString &#x3D; function() &#123;</span><br><span class=\"line\">            return String(Object.hasOwnProperty).replace(&#39;hasOwnProperty&#39;, &#39;postMessage&#39;);</span><br><span class=\"line\">            &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">            window.postMessage &#x3D; patchedPostMessage;</span><br><span class=\"line\">            &#x2F;&#x2F; 这里加入要注入到webview的逻辑</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        const patchPostMessageJsCode &#x3D; &#39;(&#39; + String(patchPostMessageFunction) + &#39;)();&#39;;</span><br><span class=\"line\"></span><br><span class=\"line\">        return (</span><br><span class=\"line\">            &lt;WebView injectedJavaScript&#x3D;&#123;patchPostMessageJsCode&#125;&#x2F;&gt;</span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"6\">\n<li>iOS 无法输入中文的问题</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; Component &#125; from &#39;react&#39;</span><br><span class=\"line\">import &#123; Platform, TextInput &#125; from &#39;react-native&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export default class LLTextInput extends Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   shouldComponentUpdate (nextProps)&#123;</span><br><span class=\"line\">      return Platform.OS !&#x3D;&#x3D; &#39;ios&#39;</span><br><span class=\"line\">            || (this.props.value &#x3D;&#x3D;&#x3D; nextProps.value &amp;&amp; (nextProps.defaultValue &#x3D;&#x3D; undefined || nextProps.defaultValue &#x3D;&#x3D; &#39;&#39; ))</span><br><span class=\"line\">            || (this.props.defaultValue &#x3D;&#x3D;&#x3D; nextProps.defaultValue &amp;&amp; (nextProps.value &#x3D;&#x3D; undefined || nextProps.value &#x3D;&#x3D; &#39;&#39; ))</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   render() &#123;</span><br><span class=\"line\">      return &lt;TextInput &#123;...this.props&#125; &#x2F;&gt;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>android 打包报错 <code>Expected a name but was STRING at line 1 column 99 path $[0].apkInfo.versionName</code></p>\n<blockquote>\n<p>把打包路径上的文件夹给删了，然后再打包就好了。<br>比如我的 apk 是存储在 E:\\apk\\release 这个路径,然后我就把 release 文件夹给删除了，然后重新打包就好了。<br>或者你也可以更换一下你的打包路径也可以哦。</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"gitignore忽略规则简单说明","date":"2020-05-09T09:05:04.000Z","comments":1,"_content":".gitignore忽略规则简单说明\n\n```\n#               表示此为注释,将被Git忽略\n*.a             表示忽略所有 .a 结尾的文件\n!lib.a          表示但lib.a除外\n/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；\ndoc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt\n \nbin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件\n/bin:           表示忽略根目录下的bin文件\n/*.c:           表示忽略cat.c，不忽略 build/cat.c\ndebug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj\n**/foo:         表示忽略/foo,a/foo,a/b/foo等\na/**/b:         表示忽略a/b, a/x/b,a/x/y/b等\n!/bin/run.sh    表示不忽略bin目录下的run.sh文件\n*.log:          表示忽略所有 .log 文件\nconfig.php:     表示忽略当前路径的 config.php 文件\n \n/mtk/           表示过滤整个文件夹\n*.zip           表示过滤所有.zip文件\n/mtk/do.c       表示过滤某个具体文件\n \n被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。\n \n需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：\n!*.zip\n!/mtk/one.txt\n \n唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？\n想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：\n/mtk/*\n!/mtk/one.txt\n \n假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！\n注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！\n \n----------------------------------------------------------------------------------\n还有一些规则如下：\nfd1/*\n说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\n \n/fd1/*\n说明：忽略根目录下的 /fd1/ 目录的全部内容；\n \n/*\n!.gitignore\n!/fw/ \n/fw/*\n!/fw/bin/\n!/fw/sf/\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。\n\n```","source":"_posts/gitignore文件配置规则.md","raw":"---\ntitle: gitignore忽略规则简单说明\ndate: 2020-05-09 17:05:04\ncategories: \ntags: []\ncomments: true\n---\n.gitignore忽略规则简单说明\n\n```\n#               表示此为注释,将被Git忽略\n*.a             表示忽略所有 .a 结尾的文件\n!lib.a          表示但lib.a除外\n/TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir/TODO\nbuild/          表示忽略 build/目录下的所有文件，过滤整个build文件夹；\ndoc/*.txt       表示会忽略doc/notes.txt但不包括 doc/server/arch.txt\n \nbin/:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件\n/bin:           表示忽略根目录下的bin文件\n/*.c:           表示忽略cat.c，不忽略 build/cat.c\ndebug/*.obj:    表示忽略debug/io.obj，不忽略 debug/common/io.obj和tools/debug/io.obj\n**/foo:         表示忽略/foo,a/foo,a/b/foo等\na/**/b:         表示忽略a/b, a/x/b,a/x/y/b等\n!/bin/run.sh    表示不忽略bin目录下的run.sh文件\n*.log:          表示忽略所有 .log 文件\nconfig.php:     表示忽略当前路径的 config.php 文件\n \n/mtk/           表示过滤整个文件夹\n*.zip           表示过滤所有.zip文件\n/mtk/do.c       表示过滤某个具体文件\n \n被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。\n \n需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：\n!*.zip\n!/mtk/one.txt\n \n唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？\n想象一个场景：假如我们只需要管理/mtk/目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：\n/mtk/*\n!/mtk/one.txt\n \n假设我们只有过滤规则，而没有添加规则，那么我们就需要把/mtk/目录下除了one.txt以外的所有文件都写出来！\n注意上面的/mtk/*不能写为/mtk/，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！\n \n----------------------------------------------------------------------------------\n还有一些规则如下：\nfd1/*\n说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 /fd1/ 目录，还是某个子目录 /child/fd1/ 目录，都会被忽略；\n \n/fd1/*\n说明：忽略根目录下的 /fd1/ 目录的全部内容；\n \n/*\n!.gitignore\n!/fw/ \n/fw/*\n!/fw/bin/\n!/fw/sf/\n说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 /fw/bin/ 和 /fw/sf/ 目录；注意要先对bin/的父目录使用!规则，使其不被排除。\n\n```","slug":"gitignore文件配置规则","published":1,"updated":"2020-06-23T08:43:50.911Z","layout":"post","photos":[],"link":"","_id":"ckbrouqts00071losg5744f4r","content":"<p>.gitignore忽略规则简单说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#               表示此为注释,将被Git忽略</span><br><span class=\"line\">*.a             表示忽略所有 .a 结尾的文件</span><br><span class=\"line\">!lib.a          表示但lib.a除外</span><br><span class=\"line\">&#x2F;TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class=\"line\">build&#x2F;          表示忽略 build&#x2F;目录下的所有文件，过滤整个build文件夹；</span><br><span class=\"line\">doc&#x2F;*.txt       表示会忽略doc&#x2F;notes.txt但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">bin&#x2F;:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class=\"line\">&#x2F;bin:           表示忽略根目录下的bin文件</span><br><span class=\"line\">&#x2F;*.c:           表示忽略cat.c，不忽略 build&#x2F;cat.c</span><br><span class=\"line\">debug&#x2F;*.obj:    表示忽略debug&#x2F;io.obj，不忽略 debug&#x2F;common&#x2F;io.obj和tools&#x2F;debug&#x2F;io.obj</span><br><span class=\"line\">**&#x2F;foo:         表示忽略&#x2F;foo,a&#x2F;foo,a&#x2F;b&#x2F;foo等</span><br><span class=\"line\">a&#x2F;**&#x2F;b:         表示忽略a&#x2F;b, a&#x2F;x&#x2F;b,a&#x2F;x&#x2F;y&#x2F;b等</span><br><span class=\"line\">!&#x2F;bin&#x2F;run.sh    表示不忽略bin目录下的run.sh文件</span><br><span class=\"line\">*.log:          表示忽略所有 .log 文件</span><br><span class=\"line\">config.php:     表示忽略当前路径的 config.php 文件</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;mtk&#x2F;           表示过滤整个文件夹</span><br><span class=\"line\">*.zip           表示过滤所有.zip文件</span><br><span class=\"line\">&#x2F;mtk&#x2F;do.c       表示过滤某个具体文件</span><br><span class=\"line\"> </span><br><span class=\"line\">被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。</span><br><span class=\"line\"> </span><br><span class=\"line\">需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：</span><br><span class=\"line\">!*.zip</span><br><span class=\"line\">!&#x2F;mtk&#x2F;one.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？</span><br><span class=\"line\">想象一个场景：假如我们只需要管理&#x2F;mtk&#x2F;目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：</span><br><span class=\"line\">&#x2F;mtk&#x2F;*</span><br><span class=\"line\">!&#x2F;mtk&#x2F;one.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">假设我们只有过滤规则，而没有添加规则，那么我们就需要把&#x2F;mtk&#x2F;目录下除了one.txt以外的所有文件都写出来！</span><br><span class=\"line\">注意上面的&#x2F;mtk&#x2F;*不能写为&#x2F;mtk&#x2F;，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！</span><br><span class=\"line\"> </span><br><span class=\"line\">----------------------------------------------------------------------------------</span><br><span class=\"line\">还有一些规则如下：</span><br><span class=\"line\">fd1&#x2F;*</span><br><span class=\"line\">说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 &#x2F;fd1&#x2F; 目录，还是某个子目录 &#x2F;child&#x2F;fd1&#x2F; 目录，都会被忽略；</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;fd1&#x2F;*</span><br><span class=\"line\">说明：忽略根目录下的 &#x2F;fd1&#x2F; 目录的全部内容；</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\">!&#x2F;fw&#x2F; </span><br><span class=\"line\">&#x2F;fw&#x2F;*</span><br><span class=\"line\">!&#x2F;fw&#x2F;bin&#x2F;</span><br><span class=\"line\">!&#x2F;fw&#x2F;sf&#x2F;</span><br><span class=\"line\">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 &#x2F;fw&#x2F;bin&#x2F; 和 &#x2F;fw&#x2F;sf&#x2F; 目录；注意要先对bin&#x2F;的父目录使用!规则，使其不被排除。</span><br></pre></td></tr></table></figure>","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>.gitignore忽略规则简单说明</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#               表示此为注释,将被Git忽略</span><br><span class=\"line\">*.a             表示忽略所有 .a 结尾的文件</span><br><span class=\"line\">!lib.a          表示但lib.a除外</span><br><span class=\"line\">&#x2F;TODO           表示仅仅忽略项目根目录下的 TODO 文件，不包括 subdir&#x2F;TODO</span><br><span class=\"line\">build&#x2F;          表示忽略 build&#x2F;目录下的所有文件，过滤整个build文件夹；</span><br><span class=\"line\">doc&#x2F;*.txt       表示会忽略doc&#x2F;notes.txt但不包括 doc&#x2F;server&#x2F;arch.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">bin&#x2F;:           表示忽略当前路径下的bin文件夹，该文件夹下的所有内容都会被忽略，不忽略 bin 文件</span><br><span class=\"line\">&#x2F;bin:           表示忽略根目录下的bin文件</span><br><span class=\"line\">&#x2F;*.c:           表示忽略cat.c，不忽略 build&#x2F;cat.c</span><br><span class=\"line\">debug&#x2F;*.obj:    表示忽略debug&#x2F;io.obj，不忽略 debug&#x2F;common&#x2F;io.obj和tools&#x2F;debug&#x2F;io.obj</span><br><span class=\"line\">**&#x2F;foo:         表示忽略&#x2F;foo,a&#x2F;foo,a&#x2F;b&#x2F;foo等</span><br><span class=\"line\">a&#x2F;**&#x2F;b:         表示忽略a&#x2F;b, a&#x2F;x&#x2F;b,a&#x2F;x&#x2F;y&#x2F;b等</span><br><span class=\"line\">!&#x2F;bin&#x2F;run.sh    表示不忽略bin目录下的run.sh文件</span><br><span class=\"line\">*.log:          表示忽略所有 .log 文件</span><br><span class=\"line\">config.php:     表示忽略当前路径的 config.php 文件</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;mtk&#x2F;           表示过滤整个文件夹</span><br><span class=\"line\">*.zip           表示过滤所有.zip文件</span><br><span class=\"line\">&#x2F;mtk&#x2F;do.c       表示过滤某个具体文件</span><br><span class=\"line\"> </span><br><span class=\"line\">被过滤掉的文件就不会出现在git仓库中（gitlab或github）了，当然本地库中还有，只是push的时候不会上传。</span><br><span class=\"line\"> </span><br><span class=\"line\">需要注意的是，gitignore还可以指定要将哪些文件添加到版本管理中，如下：</span><br><span class=\"line\">!*.zip</span><br><span class=\"line\">!&#x2F;mtk&#x2F;one.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">唯一的区别就是规则开头多了一个感叹号，Git会将满足这类规则的文件添加到版本管理中。为什么要有两种规则呢？</span><br><span class=\"line\">想象一个场景：假如我们只需要管理&#x2F;mtk&#x2F;目录中的one.txt文件，这个目录中的其他文件都不需要管理，那么.gitignore规则应写为：：</span><br><span class=\"line\">&#x2F;mtk&#x2F;*</span><br><span class=\"line\">!&#x2F;mtk&#x2F;one.txt</span><br><span class=\"line\"> </span><br><span class=\"line\">假设我们只有过滤规则，而没有添加规则，那么我们就需要把&#x2F;mtk&#x2F;目录下除了one.txt以外的所有文件都写出来！</span><br><span class=\"line\">注意上面的&#x2F;mtk&#x2F;*不能写为&#x2F;mtk&#x2F;，否则父目录被前面的规则排除掉了，one.txt文件虽然加了!过滤规则，也不会生效！</span><br><span class=\"line\"> </span><br><span class=\"line\">----------------------------------------------------------------------------------</span><br><span class=\"line\">还有一些规则如下：</span><br><span class=\"line\">fd1&#x2F;*</span><br><span class=\"line\">说明：忽略目录 fd1 下的全部内容；注意，不管是根目录下的 &#x2F;fd1&#x2F; 目录，还是某个子目录 &#x2F;child&#x2F;fd1&#x2F; 目录，都会被忽略；</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;fd1&#x2F;*</span><br><span class=\"line\">说明：忽略根目录下的 &#x2F;fd1&#x2F; 目录的全部内容；</span><br><span class=\"line\"> </span><br><span class=\"line\">&#x2F;*</span><br><span class=\"line\">!.gitignore</span><br><span class=\"line\">!&#x2F;fw&#x2F; </span><br><span class=\"line\">&#x2F;fw&#x2F;*</span><br><span class=\"line\">!&#x2F;fw&#x2F;bin&#x2F;</span><br><span class=\"line\">!&#x2F;fw&#x2F;sf&#x2F;</span><br><span class=\"line\">说明：忽略全部内容，但是不忽略 .gitignore 文件、根目录下的 &#x2F;fw&#x2F;bin&#x2F; 和 &#x2F;fw&#x2F;sf&#x2F; 目录；注意要先对bin&#x2F;的父目录使用!规则，使其不被排除。</span><br></pre></td></tr></table></figure>"},{"title":"iOS | bug 合集","date":"2020-03-29T05:27:20.000Z","comments":1,"_content":"","source":"_posts/iOS | bug 合集.md","raw":"---\ntitle: iOS | bug 合集\ndate: 2020-03-29 13:27:20\ncategories: iOS\ntags: []\ncomments: true\n---","slug":"iOS | bug 合集","published":1,"updated":"2020-04-02T05:32:06.175Z","layout":"post","photos":[],"link":"","_id":"ckbrouqtu00091los58er32rg","content":"","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":""},{"title":"js | 不常用函数集合","date":"2020-05-12T06:07:14.000Z","comments":1,"_content":"\n- 数字年份转大写\n```\nfunction date2word(year='2020',month='10',day='05') {\n    const dateWord = {\n        '0':'零',\n        '1':'一',\n        '2':'二',\n        '3':'三',\n        '4':'四',\n        '5':'五',\n        '6':'六',\n        '7':'七',\n        '8':'八',\n        '9':'九',\n        '10': '十'\n    }\n    const monthWord = {\n        '1':'正',\n        '2':'二',\n        '3':'三',\n        '4':'四',\n        '5':'五',\n        '6':'六',\n        '7':'七',\n        '8':'八',\n        '9':'九',\n        '10': '十'\n    } \n    // 转换年\n    const yearArr = (year+'').split('')\n    let yearStr = ''\n    yearArr.forEach((value,index)=>{\n        yearStr += dateWord[value]\n    })\n\n    // 转换月\n    let monthStr = ''\n    if((month*1) > 10) {\n        monthStr = '十'+dateWord[(month*1)%10+'']+'月'\n    } else {\n        monthStr = monthWord[month*1+''] + '月'\n    }\n\n    // 转换日\n    let dayStr = ''\n    if((day*1)>10) {\n        const dayDivide = parseInt(day*1/10)\n        const dayRemain = (day*1)%10\n        if(dayDivide > 1)  {\n            dayStr = dateWord[dayDivide+''] + '十' + dateWord[dayRemain+'']\n        } else {\n            dayStr = '十' + dateWord[dayRemain+'']\n        }\n    } else {\n        dayStr = '初' + dateWord[day*1+'']\n    }\n    return {year:yearStr, month: monthStr, day: dayStr}\n}\n```","source":"_posts/js | 不常用函数集合.md","raw":"---\ntitle: js | 不常用函数集合\ndate: 2020-05-12 14:07:14\ncategories: \ntags: []\ncomments: true\n---\n\n- 数字年份转大写\n```\nfunction date2word(year='2020',month='10',day='05') {\n    const dateWord = {\n        '0':'零',\n        '1':'一',\n        '2':'二',\n        '3':'三',\n        '4':'四',\n        '5':'五',\n        '6':'六',\n        '7':'七',\n        '8':'八',\n        '9':'九',\n        '10': '十'\n    }\n    const monthWord = {\n        '1':'正',\n        '2':'二',\n        '3':'三',\n        '4':'四',\n        '5':'五',\n        '6':'六',\n        '7':'七',\n        '8':'八',\n        '9':'九',\n        '10': '十'\n    } \n    // 转换年\n    const yearArr = (year+'').split('')\n    let yearStr = ''\n    yearArr.forEach((value,index)=>{\n        yearStr += dateWord[value]\n    })\n\n    // 转换月\n    let monthStr = ''\n    if((month*1) > 10) {\n        monthStr = '十'+dateWord[(month*1)%10+'']+'月'\n    } else {\n        monthStr = monthWord[month*1+''] + '月'\n    }\n\n    // 转换日\n    let dayStr = ''\n    if((day*1)>10) {\n        const dayDivide = parseInt(day*1/10)\n        const dayRemain = (day*1)%10\n        if(dayDivide > 1)  {\n            dayStr = dateWord[dayDivide+''] + '十' + dateWord[dayRemain+'']\n        } else {\n            dayStr = '十' + dateWord[dayRemain+'']\n        }\n    } else {\n        dayStr = '初' + dateWord[day*1+'']\n    }\n    return {year:yearStr, month: monthStr, day: dayStr}\n}\n```","slug":"js | 不常用函数集合","published":1,"updated":"2020-06-23T08:43:50.911Z","layout":"post","photos":[],"link":"","_id":"ckbrouqtv000b1los00o699jf","content":"<ul>\n<li>数字年份转大写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function date2word(year&#x3D;&#39;2020&#39;,month&#x3D;&#39;10&#39;,day&#x3D;&#39;05&#39;) &#123;</span><br><span class=\"line\">    const dateWord &#x3D; &#123;</span><br><span class=\"line\">        &#39;0&#39;:&#39;零&#39;,</span><br><span class=\"line\">        &#39;1&#39;:&#39;一&#39;,</span><br><span class=\"line\">        &#39;2&#39;:&#39;二&#39;,</span><br><span class=\"line\">        &#39;3&#39;:&#39;三&#39;,</span><br><span class=\"line\">        &#39;4&#39;:&#39;四&#39;,</span><br><span class=\"line\">        &#39;5&#39;:&#39;五&#39;,</span><br><span class=\"line\">        &#39;6&#39;:&#39;六&#39;,</span><br><span class=\"line\">        &#39;7&#39;:&#39;七&#39;,</span><br><span class=\"line\">        &#39;8&#39;:&#39;八&#39;,</span><br><span class=\"line\">        &#39;9&#39;:&#39;九&#39;,</span><br><span class=\"line\">        &#39;10&#39;: &#39;十&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const monthWord &#x3D; &#123;</span><br><span class=\"line\">        &#39;1&#39;:&#39;正&#39;,</span><br><span class=\"line\">        &#39;2&#39;:&#39;二&#39;,</span><br><span class=\"line\">        &#39;3&#39;:&#39;三&#39;,</span><br><span class=\"line\">        &#39;4&#39;:&#39;四&#39;,</span><br><span class=\"line\">        &#39;5&#39;:&#39;五&#39;,</span><br><span class=\"line\">        &#39;6&#39;:&#39;六&#39;,</span><br><span class=\"line\">        &#39;7&#39;:&#39;七&#39;,</span><br><span class=\"line\">        &#39;8&#39;:&#39;八&#39;,</span><br><span class=\"line\">        &#39;9&#39;:&#39;九&#39;,</span><br><span class=\"line\">        &#39;10&#39;: &#39;十&#39;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    &#x2F;&#x2F; 转换年</span><br><span class=\"line\">    const yearArr &#x3D; (year+&#39;&#39;).split(&#39;&#39;)</span><br><span class=\"line\">    let yearStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    yearArr.forEach((value,index)&#x3D;&gt;&#123;</span><br><span class=\"line\">        yearStr +&#x3D; dateWord[value]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 转换月</span><br><span class=\"line\">    let monthStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    if((month*1) &gt; 10) &#123;</span><br><span class=\"line\">        monthStr &#x3D; &#39;十&#39;+dateWord[(month*1)%10+&#39;&#39;]+&#39;月&#39;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        monthStr &#x3D; monthWord[month*1+&#39;&#39;] + &#39;月&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 转换日</span><br><span class=\"line\">    let dayStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    if((day*1)&gt;10) &#123;</span><br><span class=\"line\">        const dayDivide &#x3D; parseInt(day*1&#x2F;10)</span><br><span class=\"line\">        const dayRemain &#x3D; (day*1)%10</span><br><span class=\"line\">        if(dayDivide &gt; 1)  &#123;</span><br><span class=\"line\">            dayStr &#x3D; dateWord[dayDivide+&#39;&#39;] + &#39;十&#39; + dateWord[dayRemain+&#39;&#39;]</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            dayStr &#x3D; &#39;十&#39; + dateWord[dayRemain+&#39;&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        dayStr &#x3D; &#39;初&#39; + dateWord[day*1+&#39;&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;year:yearStr, month: monthStr, day: dayStr&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<ul>\n<li>数字年份转大写<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function date2word(year&#x3D;&#39;2020&#39;,month&#x3D;&#39;10&#39;,day&#x3D;&#39;05&#39;) &#123;</span><br><span class=\"line\">    const dateWord &#x3D; &#123;</span><br><span class=\"line\">        &#39;0&#39;:&#39;零&#39;,</span><br><span class=\"line\">        &#39;1&#39;:&#39;一&#39;,</span><br><span class=\"line\">        &#39;2&#39;:&#39;二&#39;,</span><br><span class=\"line\">        &#39;3&#39;:&#39;三&#39;,</span><br><span class=\"line\">        &#39;4&#39;:&#39;四&#39;,</span><br><span class=\"line\">        &#39;5&#39;:&#39;五&#39;,</span><br><span class=\"line\">        &#39;6&#39;:&#39;六&#39;,</span><br><span class=\"line\">        &#39;7&#39;:&#39;七&#39;,</span><br><span class=\"line\">        &#39;8&#39;:&#39;八&#39;,</span><br><span class=\"line\">        &#39;9&#39;:&#39;九&#39;,</span><br><span class=\"line\">        &#39;10&#39;: &#39;十&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const monthWord &#x3D; &#123;</span><br><span class=\"line\">        &#39;1&#39;:&#39;正&#39;,</span><br><span class=\"line\">        &#39;2&#39;:&#39;二&#39;,</span><br><span class=\"line\">        &#39;3&#39;:&#39;三&#39;,</span><br><span class=\"line\">        &#39;4&#39;:&#39;四&#39;,</span><br><span class=\"line\">        &#39;5&#39;:&#39;五&#39;,</span><br><span class=\"line\">        &#39;6&#39;:&#39;六&#39;,</span><br><span class=\"line\">        &#39;7&#39;:&#39;七&#39;,</span><br><span class=\"line\">        &#39;8&#39;:&#39;八&#39;,</span><br><span class=\"line\">        &#39;9&#39;:&#39;九&#39;,</span><br><span class=\"line\">        &#39;10&#39;: &#39;十&#39;</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">    &#x2F;&#x2F; 转换年</span><br><span class=\"line\">    const yearArr &#x3D; (year+&#39;&#39;).split(&#39;&#39;)</span><br><span class=\"line\">    let yearStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    yearArr.forEach((value,index)&#x3D;&gt;&#123;</span><br><span class=\"line\">        yearStr +&#x3D; dateWord[value]</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 转换月</span><br><span class=\"line\">    let monthStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    if((month*1) &gt; 10) &#123;</span><br><span class=\"line\">        monthStr &#x3D; &#39;十&#39;+dateWord[(month*1)%10+&#39;&#39;]+&#39;月&#39;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        monthStr &#x3D; monthWord[month*1+&#39;&#39;] + &#39;月&#39;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#x2F;&#x2F; 转换日</span><br><span class=\"line\">    let dayStr &#x3D; &#39;&#39;</span><br><span class=\"line\">    if((day*1)&gt;10) &#123;</span><br><span class=\"line\">        const dayDivide &#x3D; parseInt(day*1&#x2F;10)</span><br><span class=\"line\">        const dayRemain &#x3D; (day*1)%10</span><br><span class=\"line\">        if(dayDivide &gt; 1)  &#123;</span><br><span class=\"line\">            dayStr &#x3D; dateWord[dayDivide+&#39;&#39;] + &#39;十&#39; + dateWord[dayRemain+&#39;&#39;]</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            dayStr &#x3D; &#39;十&#39; + dateWord[dayRemain+&#39;&#39;]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">        dayStr &#x3D; &#39;初&#39; + dateWord[day*1+&#39;&#39;]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return &#123;year:yearStr, month: monthStr, day: dayStr&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Android | bug 合集","date":"2020-03-26T15:11:28.000Z","comments":1,"_content":"\n1. 打包时报错 `You should manually set the same version via DependencyResolution`\n   > 报错原因： 项目添加的第三方库依赖的版本不一致\n\n```\n// 解决方案一 ： 升级Android X\n// 解决方案二 ： 项目级 gradle 文件下添加以下配置\nsubprojects {\n    configurations.all {\n        resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n            def requested = details.requested\n            if (requested.group == 'com.android.support') {\n                if (!requested.name.startsWith(\"multidex\")) {\n                    details.useVersion '25.4.0'\n                }\n            }\n        }\n    }\n}\n```\n\n2. 打包时报错 `Execution failed for task ':app:lintVitalRelease'.`\n\n```\n// app/build.gradle\nandroid {\n    ...\n    // 增加\n    lintOptions {\n        checkReleaseBuilds false\n    }\n}\n\n\n```\n","source":"_posts/Android | bug 合集.md","raw":"---\ntitle: Android | bug 合集\ndate: 2020-03-26 23:11:28\ncategories: Android\ntags: [Android]\ncomments: true\n---\n\n1. 打包时报错 `You should manually set the same version via DependencyResolution`\n   > 报错原因： 项目添加的第三方库依赖的版本不一致\n\n```\n// 解决方案一 ： 升级Android X\n// 解决方案二 ： 项目级 gradle 文件下添加以下配置\nsubprojects {\n    configurations.all {\n        resolutionStrategy.eachDependency { DependencyResolveDetails details ->\n            def requested = details.requested\n            if (requested.group == 'com.android.support') {\n                if (!requested.name.startsWith(\"multidex\")) {\n                    details.useVersion '25.4.0'\n                }\n            }\n        }\n    }\n}\n```\n\n2. 打包时报错 `Execution failed for task ':app:lintVitalRelease'.`\n\n```\n// app/build.gradle\nandroid {\n    ...\n    // 增加\n    lintOptions {\n        checkReleaseBuilds false\n    }\n}\n\n\n```\n","slug":"Android | bug 合集","published":1,"updated":"2020-04-03T05:31:43.142Z","layout":"post","photos":[],"link":"","_id":"ckbrouqty000f1loseyqm9w5o","content":"<ol>\n<li>打包时报错 <code>You should manually set the same version via DependencyResolution</code><blockquote>\n<p>报错原因： 项目添加的第三方库依赖的版本不一致</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 解决方案一 ： 升级Android X</span><br><span class=\"line\">&#x2F;&#x2F; 解决方案二 ： 项目级 gradle 文件下添加以下配置</span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    configurations.all &#123;</span><br><span class=\"line\">        resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class=\"line\">            def requested &#x3D; details.requested</span><br><span class=\"line\">            if (requested.group &#x3D;&#x3D; &#39;com.android.support&#39;) &#123;</span><br><span class=\"line\">                if (!requested.name.startsWith(&quot;multidex&quot;)) &#123;</span><br><span class=\"line\">                    details.useVersion &#39;25.4.0&#39;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>打包时报错 <code>Execution failed for task &#39;:app:lintVitalRelease&#39;.</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; app&#x2F;build.gradle</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#x2F;&#x2F; 增加</span><br><span class=\"line\">    lintOptions &#123;</span><br><span class=\"line\">        checkReleaseBuilds false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<ol>\n<li>打包时报错 <code>You should manually set the same version via DependencyResolution</code><blockquote>\n<p>报错原因： 项目添加的第三方库依赖的版本不一致</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 解决方案一 ： 升级Android X</span><br><span class=\"line\">&#x2F;&#x2F; 解决方案二 ： 项目级 gradle 文件下添加以下配置</span><br><span class=\"line\">subprojects &#123;</span><br><span class=\"line\">    configurations.all &#123;</span><br><span class=\"line\">        resolutionStrategy.eachDependency &#123; DependencyResolveDetails details -&gt;</span><br><span class=\"line\">            def requested &#x3D; details.requested</span><br><span class=\"line\">            if (requested.group &#x3D;&#x3D; &#39;com.android.support&#39;) &#123;</span><br><span class=\"line\">                if (!requested.name.startsWith(&quot;multidex&quot;)) &#123;</span><br><span class=\"line\">                    details.useVersion &#39;25.4.0&#39;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>打包时报错 <code>Execution failed for task &#39;:app:lintVitalRelease&#39;.</code></li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; app&#x2F;build.gradle</span><br><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &#x2F;&#x2F; 增加</span><br><span class=\"line\">    lintOptions &#123;</span><br><span class=\"line\">        checkReleaseBuilds false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"js | 的this指向问题","date":"2020-03-23T03:17:10.000Z","comments":1,"_content":"\n[toc]\n\n# 关于 js 的 this 指向问题\n\n> 一直以来对于 js 的 this 指针这一块理解都是比较模糊，也有查阅过相关资料，但是时间一长又会忘记，所以这篇文章单独记录一下 this 指针的指向问题，一方面加深记忆，一方面也方便自己查阅\n\n## 要点\n\n> **谁调用就指向谁，没人调用就指向window，简单来说函数的 this 和谁调用它有关。如果没有对象调用它，那么 this 就是指向 window（es5 环境下）**函数的调用方式决定了 this 的指向，所以理解 this 的指向问题，最简单的方法就是通过分析 js 几种函数的调用模式。js 函数的调用模式有：**函数调用模式**、**方法调用模式**、**构造函数调用模式**、**apply 和 call 调用模式**、**以及箭头函数**\n\n## 函数调用模式\n\n> 函数被直接调用时，其实是作为属性挂载在**全局对象下**，所以这种模式**在浏览器环境**下 this 自然指向**window 对象**\n\n![函数调用模式下的this指向](https://tva1.sinaimg.cn/large/00831rSTgy1gd42s9x2hrj30ht03kdg1.jpg)\n\n## 方法调用模式\n\n> 当函数被保存为一个对象的属性，通过对象 **.**或者 **[]**调用时，称为方法调用模式，这种情况 this 被绑定在调用的对象上。\n\n1. 一层嵌套\n\n```\n\n//\nconst dict = {\n    name: 'dict',\n    test: function() {\n        console.log(this.name)\n    }\n}\n\n// 打印 dict\ndict.test()\n\n```\n\n2. 对象多重嵌套\n   > 这种情况下，不管是嵌套多少层，this 都会指向到调用他的对象上\n\n```\nconst first = {\n    name: 'first',\n    second: {\n        name: 'second',\n        test: function() {\n            console.log(this.name)\n        }\n    }\n\n}\n\n// 这里因为调用test方法是second对象，所以指向对象是second\nfirst.second.test()\n```\n\n3. 方法被赋值为一个新对象\n   > 这种情况下相当于回到函数调用模式\n\n```\nconst first = {\n    name: 'first',\n    second: {\n        name: 'second',\n        test: function() {\n            console.log(this.name)\n        }\n    }\n}\n\nname = 'a'\n\n// 打印 a，这里因为a是挂载在全局对象下，所以this自然指向全局对象\nconst a = first.second.test\na()\n```\n\n## 构造函数调用模式\n\n> 如果函数在被 new 关键字创建为一个新的实例对象，那么这个函数就成为此对象的构造函数，如果**构造函数不返回对象，this 就指向这个实例。**\n\n```\n// 构造函数不返回对象，this指向实例\nfunction Fn() {\n    this.name = 'hello'\n}\n\nconst a = new Fn()\n\nconsole.log(a.name)\n\n\n```\n\n## call 和 apply 调用模式\n\n> js 中的函数也是对象，所有函数都有两个方法 **call 和 apply**，这两个方法可以让我们构建一个参数数组传递给调用函数，同时也允许我们改变 this 的指向\n\n```\nname = 'window'\n\nfunction getName() {\n    console.log(this.name)\n}\n\nconst a = {\n    name: 'objA'\n}\n\ngetName.apply(a)    // objA\ngetName.call(a)     // objA\ngetName.apply()     // window\ngetName.call()      // window\n```\n\n## 注意\n\n> 以下代码中是用 es6 的 class 定义的一个方法，这段代码在 es5 的环境下理论上应该是输出 'window'，但是实际运行 this 的指向会变成 undefined，猜测应该是 es6 的 class 关键字做了优化。\n\n```\n// es6\nname = 'window'\nclass A {\n    constructor(name) {\n        this.name = name\n    }\n    getName() {\n        console.log(this.name)\n    }\n}\nconst a = new A('objA')\nconst test = a.getName\n// 报错\ntest()\n\n// es5\nname = 'window'\nfunction A(name) {\n    this.name = name\n}\nA.prototype.getName = function() {\n    console.log(this.name)\n}\nconst a = new A('objA')\nconst test = a.getName\n// 打印window\ntest()\n```\n","source":"_posts/js | 关于js的this指针.md","raw":"---\ntitle: js | 的this指向问题\ndate: 2020-03-23 11:17:10\ncategories: js\ntags: [js]\ncomments: true\n---\n\n[toc]\n\n# 关于 js 的 this 指向问题\n\n> 一直以来对于 js 的 this 指针这一块理解都是比较模糊，也有查阅过相关资料，但是时间一长又会忘记，所以这篇文章单独记录一下 this 指针的指向问题，一方面加深记忆，一方面也方便自己查阅\n\n## 要点\n\n> **谁调用就指向谁，没人调用就指向window，简单来说函数的 this 和谁调用它有关。如果没有对象调用它，那么 this 就是指向 window（es5 环境下）**函数的调用方式决定了 this 的指向，所以理解 this 的指向问题，最简单的方法就是通过分析 js 几种函数的调用模式。js 函数的调用模式有：**函数调用模式**、**方法调用模式**、**构造函数调用模式**、**apply 和 call 调用模式**、**以及箭头函数**\n\n## 函数调用模式\n\n> 函数被直接调用时，其实是作为属性挂载在**全局对象下**，所以这种模式**在浏览器环境**下 this 自然指向**window 对象**\n\n![函数调用模式下的this指向](https://tva1.sinaimg.cn/large/00831rSTgy1gd42s9x2hrj30ht03kdg1.jpg)\n\n## 方法调用模式\n\n> 当函数被保存为一个对象的属性，通过对象 **.**或者 **[]**调用时，称为方法调用模式，这种情况 this 被绑定在调用的对象上。\n\n1. 一层嵌套\n\n```\n\n//\nconst dict = {\n    name: 'dict',\n    test: function() {\n        console.log(this.name)\n    }\n}\n\n// 打印 dict\ndict.test()\n\n```\n\n2. 对象多重嵌套\n   > 这种情况下，不管是嵌套多少层，this 都会指向到调用他的对象上\n\n```\nconst first = {\n    name: 'first',\n    second: {\n        name: 'second',\n        test: function() {\n            console.log(this.name)\n        }\n    }\n\n}\n\n// 这里因为调用test方法是second对象，所以指向对象是second\nfirst.second.test()\n```\n\n3. 方法被赋值为一个新对象\n   > 这种情况下相当于回到函数调用模式\n\n```\nconst first = {\n    name: 'first',\n    second: {\n        name: 'second',\n        test: function() {\n            console.log(this.name)\n        }\n    }\n}\n\nname = 'a'\n\n// 打印 a，这里因为a是挂载在全局对象下，所以this自然指向全局对象\nconst a = first.second.test\na()\n```\n\n## 构造函数调用模式\n\n> 如果函数在被 new 关键字创建为一个新的实例对象，那么这个函数就成为此对象的构造函数，如果**构造函数不返回对象，this 就指向这个实例。**\n\n```\n// 构造函数不返回对象，this指向实例\nfunction Fn() {\n    this.name = 'hello'\n}\n\nconst a = new Fn()\n\nconsole.log(a.name)\n\n\n```\n\n## call 和 apply 调用模式\n\n> js 中的函数也是对象，所有函数都有两个方法 **call 和 apply**，这两个方法可以让我们构建一个参数数组传递给调用函数，同时也允许我们改变 this 的指向\n\n```\nname = 'window'\n\nfunction getName() {\n    console.log(this.name)\n}\n\nconst a = {\n    name: 'objA'\n}\n\ngetName.apply(a)    // objA\ngetName.call(a)     // objA\ngetName.apply()     // window\ngetName.call()      // window\n```\n\n## 注意\n\n> 以下代码中是用 es6 的 class 定义的一个方法，这段代码在 es5 的环境下理论上应该是输出 'window'，但是实际运行 this 的指向会变成 undefined，猜测应该是 es6 的 class 关键字做了优化。\n\n```\n// es6\nname = 'window'\nclass A {\n    constructor(name) {\n        this.name = name\n    }\n    getName() {\n        console.log(this.name)\n    }\n}\nconst a = new A('objA')\nconst test = a.getName\n// 报错\ntest()\n\n// es5\nname = 'window'\nfunction A(name) {\n    this.name = name\n}\nA.prototype.getName = function() {\n    console.log(this.name)\n}\nconst a = new A('objA')\nconst test = a.getName\n// 打印window\ntest()\n```\n","slug":"js | 关于js的this指针","published":1,"updated":"2020-06-23T08:43:50.912Z","layout":"post","photos":[],"link":"","_id":"ckbrouqu0000h1los8ospgi8l","content":"<p>[toc]</p>\n<h1 id=\"关于-js-的-this-指向问题\"><a href=\"#关于-js-的-this-指向问题\" class=\"headerlink\" title=\"关于 js 的 this 指向问题\"></a>关于 js 的 this 指向问题</h1><blockquote>\n<p>一直以来对于 js 的 this 指针这一块理解都是比较模糊，也有查阅过相关资料，但是时间一长又会忘记，所以这篇文章单独记录一下 this 指针的指向问题，一方面加深记忆，一方面也方便自己查阅</p>\n</blockquote>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><blockquote>\n<p><strong>谁调用就指向谁，没人调用就指向window，简单来说函数的 this 和谁调用它有关。如果没有对象调用它，那么 this 就是指向 window（es5 环境下）</strong>函数的调用方式决定了 this 的指向，所以理解 this 的指向问题，最简单的方法就是通过分析 js 几种函数的调用模式。js 函数的调用模式有：<strong>函数调用模式</strong>、<strong>方法调用模式</strong>、<strong>构造函数调用模式</strong>、<strong>apply 和 call 调用模式</strong>、<strong>以及箭头函数</strong></p>\n</blockquote>\n<h2 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h2><blockquote>\n<p>函数被直接调用时，其实是作为属性挂载在<strong>全局对象下</strong>，所以这种模式<strong>在浏览器环境</strong>下 this 自然指向<strong>window 对象</strong></p>\n</blockquote>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd42s9x2hrj30ht03kdg1.jpg\" alt=\"函数调用模式下的this指向\"></p>\n<h2 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h2><blockquote>\n<p>当函数被保存为一个对象的属性，通过对象 <strong>.</strong>或者 <strong>[]</strong>调用时，称为方法调用模式，这种情况 this 被绑定在调用的对象上。</p>\n</blockquote>\n<ol>\n<li>一层嵌套</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">const dict &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;dict&#39;,</span><br><span class=\"line\">    test: function() &#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 打印 dict</span><br><span class=\"line\">dict.test()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对象多重嵌套<blockquote>\n<p>这种情况下，不管是嵌套多少层，this 都会指向到调用他的对象上</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;first&#39;,</span><br><span class=\"line\">    second: &#123;</span><br><span class=\"line\">        name: &#39;second&#39;,</span><br><span class=\"line\">        test: function() &#123;</span><br><span class=\"line\">            console.log(this.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 这里因为调用test方法是second对象，所以指向对象是second</span><br><span class=\"line\">first.second.test()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>方法被赋值为一个新对象<blockquote>\n<p>这种情况下相当于回到函数调用模式</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;first&#39;,</span><br><span class=\"line\">    second: &#123;</span><br><span class=\"line\">        name: &#39;second&#39;,</span><br><span class=\"line\">        test: function() &#123;</span><br><span class=\"line\">            console.log(this.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name &#x3D; &#39;a&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 打印 a，这里因为a是挂载在全局对象下，所以this自然指向全局对象</span><br><span class=\"line\">const a &#x3D; first.second.test</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h2><blockquote>\n<p>如果函数在被 new 关键字创建为一个新的实例对象，那么这个函数就成为此对象的构造函数，如果<strong>构造函数不返回对象，this 就指向这个实例。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 构造函数不返回对象，this指向实例</span><br><span class=\"line\">function Fn() &#123;</span><br><span class=\"line\">    this.name &#x3D; &#39;hello&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const a &#x3D; new Fn()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.name)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call-和-apply-调用模式\"><a href=\"#call-和-apply-调用模式\" class=\"headerlink\" title=\"call 和 apply 调用模式\"></a>call 和 apply 调用模式</h2><blockquote>\n<p>js 中的函数也是对象，所有函数都有两个方法 <strong>call 和 apply</strong>，这两个方法可以让我们构建一个参数数组传递给调用函数，同时也允许我们改变 this 的指向</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">function getName() &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const a &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;objA&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName.apply(a)    &#x2F;&#x2F; objA</span><br><span class=\"line\">getName.call(a)     &#x2F;&#x2F; objA</span><br><span class=\"line\">getName.apply()     &#x2F;&#x2F; window</span><br><span class=\"line\">getName.call()      &#x2F;&#x2F; window</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>以下代码中是用 es6 的 class 定义的一个方法，这段代码在 es5 的环境下理论上应该是输出 ‘window’，但是实际运行 this 的指向会变成 undefined，猜测应该是 es6 的 class 关键字做了优化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; es6</span><br><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">    constructor(name) &#123;</span><br><span class=\"line\">        this.name &#x3D; name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class=\"line\">const test &#x3D; a.getName</span><br><span class=\"line\">&#x2F;&#x2F; 报错</span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; es5</span><br><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\">function A(name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.prototype.getName &#x3D; function() &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class=\"line\">const test &#x3D; a.getName</span><br><span class=\"line\">&#x2F;&#x2F; 打印window</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p>[toc]</p>\n<h1 id=\"关于-js-的-this-指向问题\"><a href=\"#关于-js-的-this-指向问题\" class=\"headerlink\" title=\"关于 js 的 this 指向问题\"></a>关于 js 的 this 指向问题</h1><blockquote>\n<p>一直以来对于 js 的 this 指针这一块理解都是比较模糊，也有查阅过相关资料，但是时间一长又会忘记，所以这篇文章单独记录一下 this 指针的指向问题，一方面加深记忆，一方面也方便自己查阅</p>\n</blockquote>\n<h2 id=\"要点\"><a href=\"#要点\" class=\"headerlink\" title=\"要点\"></a>要点</h2><blockquote>\n<p><strong>谁调用就指向谁，没人调用就指向window，简单来说函数的 this 和谁调用它有关。如果没有对象调用它，那么 this 就是指向 window（es5 环境下）</strong>函数的调用方式决定了 this 的指向，所以理解 this 的指向问题，最简单的方法就是通过分析 js 几种函数的调用模式。js 函数的调用模式有：<strong>函数调用模式</strong>、<strong>方法调用模式</strong>、<strong>构造函数调用模式</strong>、<strong>apply 和 call 调用模式</strong>、<strong>以及箭头函数</strong></p>\n</blockquote>\n<h2 id=\"函数调用模式\"><a href=\"#函数调用模式\" class=\"headerlink\" title=\"函数调用模式\"></a>函数调用模式</h2><blockquote>\n<p>函数被直接调用时，其实是作为属性挂载在<strong>全局对象下</strong>，所以这种模式<strong>在浏览器环境</strong>下 this 自然指向<strong>window 对象</strong></p>\n</blockquote>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTgy1gd42s9x2hrj30ht03kdg1.jpg\" alt=\"函数调用模式下的this指向\"></p>\n<h2 id=\"方法调用模式\"><a href=\"#方法调用模式\" class=\"headerlink\" title=\"方法调用模式\"></a>方法调用模式</h2><blockquote>\n<p>当函数被保存为一个对象的属性，通过对象 <strong>.</strong>或者 <strong>[]</strong>调用时，称为方法调用模式，这种情况 this 被绑定在调用的对象上。</p>\n</blockquote>\n<ol>\n<li>一层嵌套</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;</span><br><span class=\"line\">const dict &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;dict&#39;,</span><br><span class=\"line\">    test: function() &#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 打印 dict</span><br><span class=\"line\">dict.test()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>对象多重嵌套<blockquote>\n<p>这种情况下，不管是嵌套多少层，this 都会指向到调用他的对象上</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;first&#39;,</span><br><span class=\"line\">    second: &#123;</span><br><span class=\"line\">        name: &#39;second&#39;,</span><br><span class=\"line\">        test: function() &#123;</span><br><span class=\"line\">            console.log(this.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 这里因为调用test方法是second对象，所以指向对象是second</span><br><span class=\"line\">first.second.test()</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>方法被赋值为一个新对象<blockquote>\n<p>这种情况下相当于回到函数调用模式</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const first &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;first&#39;,</span><br><span class=\"line\">    second: &#123;</span><br><span class=\"line\">        name: &#39;second&#39;,</span><br><span class=\"line\">        test: function() &#123;</span><br><span class=\"line\">            console.log(this.name)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">name &#x3D; &#39;a&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 打印 a，这里因为a是挂载在全局对象下，所以this自然指向全局对象</span><br><span class=\"line\">const a &#x3D; first.second.test</span><br><span class=\"line\">a()</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"构造函数调用模式\"><a href=\"#构造函数调用模式\" class=\"headerlink\" title=\"构造函数调用模式\"></a>构造函数调用模式</h2><blockquote>\n<p>如果函数在被 new 关键字创建为一个新的实例对象，那么这个函数就成为此对象的构造函数，如果<strong>构造函数不返回对象，this 就指向这个实例。</strong></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 构造函数不返回对象，this指向实例</span><br><span class=\"line\">function Fn() &#123;</span><br><span class=\"line\">    this.name &#x3D; &#39;hello&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const a &#x3D; new Fn()</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(a.name)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"call-和-apply-调用模式\"><a href=\"#call-和-apply-调用模式\" class=\"headerlink\" title=\"call 和 apply 调用模式\"></a>call 和 apply 调用模式</h2><blockquote>\n<p>js 中的函数也是对象，所有函数都有两个方法 <strong>call 和 apply</strong>，这两个方法可以让我们构建一个参数数组传递给调用函数，同时也允许我们改变 this 的指向</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">function getName() &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const a &#x3D; &#123;</span><br><span class=\"line\">    name: &#39;objA&#39;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getName.apply(a)    &#x2F;&#x2F; objA</span><br><span class=\"line\">getName.call(a)     &#x2F;&#x2F; objA</span><br><span class=\"line\">getName.apply()     &#x2F;&#x2F; window</span><br><span class=\"line\">getName.call()      &#x2F;&#x2F; window</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><blockquote>\n<p>以下代码中是用 es6 的 class 定义的一个方法，这段代码在 es5 的环境下理论上应该是输出 ‘window’，但是实际运行 this 的指向会变成 undefined，猜测应该是 es6 的 class 关键字做了优化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; es6</span><br><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\">class A &#123;</span><br><span class=\"line\">    constructor(name) &#123;</span><br><span class=\"line\">        this.name &#x3D; name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getName() &#123;</span><br><span class=\"line\">        console.log(this.name)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class=\"line\">const test &#x3D; a.getName</span><br><span class=\"line\">&#x2F;&#x2F; 报错</span><br><span class=\"line\">test()</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; es5</span><br><span class=\"line\">name &#x3D; &#39;window&#39;</span><br><span class=\"line\">function A(name) &#123;</span><br><span class=\"line\">    this.name &#x3D; name</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">A.prototype.getName &#x3D; function() &#123;</span><br><span class=\"line\">    console.log(this.name)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class=\"line\">const test &#x3D; a.getName</span><br><span class=\"line\">&#x2F;&#x2F; 打印window</span><br><span class=\"line\">test()</span><br></pre></td></tr></table></figure>\n"},{"title":"js | 算法题","date":"2020-03-24T07:46:10.000Z","comments":1,"_content":"\n# 注\n\n> 本文示例代码使用 js 编写=\n\n**冒泡排序**\n\n> 比较相邻的两个元素，如果后一个比前一个大，交换位置\n\n```\nconst array = [1,2, 0,421,2,33,4,344]\nfor(let j = 0; j < array.length; j++) {\n    for(let k = 0; k < array.length; k++) {\n        let a = array[j]\n        let b = array[k]\n        if(b < a) {\n            array[j] = b\n            array[k] = a\n        }\n    }\n}\nconsole.log(array)\n```\n\n**数组去重**\n\n```\nconst array = [1,2,3,22,3,2,3,4]\n\nfunction deleteRepat(array) {\n    let dict = {}\n    for(let index = 0; index < array.length; index++) {\n        dict[array[index]] = index\n    }\n    return Object.keys(dict)\n}\n\nconsole.log(Object.keys(dict))\n```\n\n**字符串转驼峰**\n\n> border-bottom-color ----> borderBottomColor\n\n```\n\nfunction topUper(str) {\n    let result = ''\n    const splitArray = str.split('-')\n    for(let index = 0; index < splitArray.length; index++) {\n        let tempStr = splitArray[index]\n        if(index == 0) {\n            result = tempStr.toLowerCase()\n        } else {\n            result += tempStr.charAt(0).toUpperCase() + tempStr.substring(1)\n        }\n    }\n    return result\n}\n\nconst str = \"BBB-bottom-color\"\nconsole.log(topUper(str))\n```\n\n**查找字符串中出现次数最多的字符串**\n\n```\nfunction getMaxCount(str) {\n    const splitArray = str.split('')\n    let result = {}\n    splitArray.forEach(target => {\n        if(result[target] != undefined) {\n            result[target] += 1\n        } else {\n            result[target] = 0\n        }\n    });\n\n    console.log(result)\n    let maxKey = Object.keys(result)[0]\n    Object.keys(result).forEach(key => {\n        if(result[key] > result[maxKey]) {\n            maxKey = key\n        }\n    })\n    return maxKey\n}\n\nconsole.log(getMaxCount('aaaaabbeeeeeeeeeee'))\n```\n\n**编写一个产生在 m、n 之间的随机整数的方法**\n\n```\n\n```\n","source":"_posts/js | 算法题.md","raw":"---\ntitle: js | 算法题\ndate: 2020-03-24 15:46:10\ncategories: 算法\ntags: [算法, js]\ncomments: true\n---\n\n# 注\n\n> 本文示例代码使用 js 编写=\n\n**冒泡排序**\n\n> 比较相邻的两个元素，如果后一个比前一个大，交换位置\n\n```\nconst array = [1,2, 0,421,2,33,4,344]\nfor(let j = 0; j < array.length; j++) {\n    for(let k = 0; k < array.length; k++) {\n        let a = array[j]\n        let b = array[k]\n        if(b < a) {\n            array[j] = b\n            array[k] = a\n        }\n    }\n}\nconsole.log(array)\n```\n\n**数组去重**\n\n```\nconst array = [1,2,3,22,3,2,3,4]\n\nfunction deleteRepat(array) {\n    let dict = {}\n    for(let index = 0; index < array.length; index++) {\n        dict[array[index]] = index\n    }\n    return Object.keys(dict)\n}\n\nconsole.log(Object.keys(dict))\n```\n\n**字符串转驼峰**\n\n> border-bottom-color ----> borderBottomColor\n\n```\n\nfunction topUper(str) {\n    let result = ''\n    const splitArray = str.split('-')\n    for(let index = 0; index < splitArray.length; index++) {\n        let tempStr = splitArray[index]\n        if(index == 0) {\n            result = tempStr.toLowerCase()\n        } else {\n            result += tempStr.charAt(0).toUpperCase() + tempStr.substring(1)\n        }\n    }\n    return result\n}\n\nconst str = \"BBB-bottom-color\"\nconsole.log(topUper(str))\n```\n\n**查找字符串中出现次数最多的字符串**\n\n```\nfunction getMaxCount(str) {\n    const splitArray = str.split('')\n    let result = {}\n    splitArray.forEach(target => {\n        if(result[target] != undefined) {\n            result[target] += 1\n        } else {\n            result[target] = 0\n        }\n    });\n\n    console.log(result)\n    let maxKey = Object.keys(result)[0]\n    Object.keys(result).forEach(key => {\n        if(result[key] > result[maxKey]) {\n            maxKey = key\n        }\n    })\n    return maxKey\n}\n\nconsole.log(getMaxCount('aaaaabbeeeeeeeeeee'))\n```\n\n**编写一个产生在 m、n 之间的随机整数的方法**\n\n```\n\n```\n","slug":"js | 算法题","published":1,"updated":"2020-04-03T05:31:50.679Z","layout":"post","photos":[],"link":"","_id":"ckbrouqu2000k1los5rky713x","content":"<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h1><blockquote>\n<p>本文示例代码使用 js 编写=</p>\n</blockquote>\n<p><strong>冒泡排序</strong></p>\n<blockquote>\n<p>比较相邻的两个元素，如果后一个比前一个大，交换位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array &#x3D; [1,2, 0,421,2,33,4,344]</span><br><span class=\"line\">for(let j &#x3D; 0; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">    for(let k &#x3D; 0; k &lt; array.length; k++) &#123;</span><br><span class=\"line\">        let a &#x3D; array[j]</span><br><span class=\"line\">        let b &#x3D; array[k]</span><br><span class=\"line\">        if(b &lt; a) &#123;</span><br><span class=\"line\">            array[j] &#x3D; b</span><br><span class=\"line\">            array[k] &#x3D; a</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(array)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组去重</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array &#x3D; [1,2,3,22,3,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">function deleteRepat(array) &#123;</span><br><span class=\"line\">    let dict &#x3D; &#123;&#125;</span><br><span class=\"line\">    for(let index &#x3D; 0; index &lt; array.length; index++) &#123;</span><br><span class=\"line\">        dict[array[index]] &#x3D; index</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Object.keys(dict)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.keys(dict))</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串转驼峰</strong></p>\n<blockquote>\n<p>border-bottom-color —-&gt; borderBottomColor</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function topUper(str) &#123;</span><br><span class=\"line\">    let result &#x3D; &#39;&#39;</span><br><span class=\"line\">    const splitArray &#x3D; str.split(&#39;-&#39;)</span><br><span class=\"line\">    for(let index &#x3D; 0; index &lt; splitArray.length; index++) &#123;</span><br><span class=\"line\">        let tempStr &#x3D; splitArray[index]</span><br><span class=\"line\">        if(index &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; tempStr.toLowerCase()</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result +&#x3D; tempStr.charAt(0).toUpperCase() + tempStr.substring(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const str &#x3D; &quot;BBB-bottom-color&quot;</span><br><span class=\"line\">console.log(topUper(str))</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找字符串中出现次数最多的字符串</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getMaxCount(str) &#123;</span><br><span class=\"line\">    const splitArray &#x3D; str.split(&#39;&#39;)</span><br><span class=\"line\">    let result &#x3D; &#123;&#125;</span><br><span class=\"line\">    splitArray.forEach(target &#x3D;&gt; &#123;</span><br><span class=\"line\">        if(result[target] !&#x3D; undefined) &#123;</span><br><span class=\"line\">            result[target] +&#x3D; 1</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result[target] &#x3D; 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(result)</span><br><span class=\"line\">    let maxKey &#x3D; Object.keys(result)[0]</span><br><span class=\"line\">    Object.keys(result).forEach(key &#x3D;&gt; &#123;</span><br><span class=\"line\">        if(result[key] &gt; result[maxKey]) &#123;</span><br><span class=\"line\">            maxKey &#x3D; key</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return maxKey</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getMaxCount(&#39;aaaaabbeeeeeeeeeee&#39;))</span><br></pre></td></tr></table></figure>\n\n<p><strong>编写一个产生在 m、n 之间的随机整数的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"注\"><a href=\"#注\" class=\"headerlink\" title=\"注\"></a>注</h1><blockquote>\n<p>本文示例代码使用 js 编写=</p>\n</blockquote>\n<p><strong>冒泡排序</strong></p>\n<blockquote>\n<p>比较相邻的两个元素，如果后一个比前一个大，交换位置</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array &#x3D; [1,2, 0,421,2,33,4,344]</span><br><span class=\"line\">for(let j &#x3D; 0; j &lt; array.length; j++) &#123;</span><br><span class=\"line\">    for(let k &#x3D; 0; k &lt; array.length; k++) &#123;</span><br><span class=\"line\">        let a &#x3D; array[j]</span><br><span class=\"line\">        let b &#x3D; array[k]</span><br><span class=\"line\">        if(b &lt; a) &#123;</span><br><span class=\"line\">            array[j] &#x3D; b</span><br><span class=\"line\">            array[k] &#x3D; a</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(array)</span><br></pre></td></tr></table></figure>\n\n<p><strong>数组去重</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const array &#x3D; [1,2,3,22,3,2,3,4]</span><br><span class=\"line\"></span><br><span class=\"line\">function deleteRepat(array) &#123;</span><br><span class=\"line\">    let dict &#x3D; &#123;&#125;</span><br><span class=\"line\">    for(let index &#x3D; 0; index &lt; array.length; index++) &#123;</span><br><span class=\"line\">        dict[array[index]] &#x3D; index</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return Object.keys(dict)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(Object.keys(dict))</span><br></pre></td></tr></table></figure>\n\n<p><strong>字符串转驼峰</strong></p>\n<blockquote>\n<p>border-bottom-color —-&gt; borderBottomColor</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">function topUper(str) &#123;</span><br><span class=\"line\">    let result &#x3D; &#39;&#39;</span><br><span class=\"line\">    const splitArray &#x3D; str.split(&#39;-&#39;)</span><br><span class=\"line\">    for(let index &#x3D; 0; index &lt; splitArray.length; index++) &#123;</span><br><span class=\"line\">        let tempStr &#x3D; splitArray[index]</span><br><span class=\"line\">        if(index &#x3D;&#x3D; 0) &#123;</span><br><span class=\"line\">            result &#x3D; tempStr.toLowerCase()</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result +&#x3D; tempStr.charAt(0).toUpperCase() + tempStr.substring(1)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return result</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const str &#x3D; &quot;BBB-bottom-color&quot;</span><br><span class=\"line\">console.log(topUper(str))</span><br></pre></td></tr></table></figure>\n\n<p><strong>查找字符串中出现次数最多的字符串</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getMaxCount(str) &#123;</span><br><span class=\"line\">    const splitArray &#x3D; str.split(&#39;&#39;)</span><br><span class=\"line\">    let result &#x3D; &#123;&#125;</span><br><span class=\"line\">    splitArray.forEach(target &#x3D;&gt; &#123;</span><br><span class=\"line\">        if(result[target] !&#x3D; undefined) &#123;</span><br><span class=\"line\">            result[target] +&#x3D; 1</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">            result[target] &#x3D; 0</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    console.log(result)</span><br><span class=\"line\">    let maxKey &#x3D; Object.keys(result)[0]</span><br><span class=\"line\">    Object.keys(result).forEach(key &#x3D;&gt; &#123;</span><br><span class=\"line\">        if(result[key] &gt; result[maxKey]) &#123;</span><br><span class=\"line\">            maxKey &#x3D; key</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    return maxKey</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(getMaxCount(&#39;aaaaabbeeeeeeeeeee&#39;))</span><br></pre></td></tr></table></figure>\n\n<p><strong>编写一个产生在 m、n 之间的随机整数的方法</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n"},{"title":"redux、react-redux、redux-thunk结合使用","date":"2020-05-08T07:27:09.000Z","comments":1,"_content":"\n\n## 简单介绍\n\n- redux\n> redux是一个统一数据流状态管理的js库，本身使用与react、或者vue框架等无关。\n\n- react-redux\n> 将redux应用到react上的库。\n\n- redux-thunk\n> redux-thunk，redux 的一个中间件，可以实现在使用redux时发异步action。\n\n\n## 什么时候需要使用redux\n> 当你的应用有许多动态数据需要在不同的页面共享时，比如说当用户修改了账户昵称之后所有的相关页面都要更新昵称，面对这样的需求，如果不使用redux，则需要通过发送通知或者数据传递的方式来解决，而使用redux则可以大大简化操作。\n\n## redux 核心概念\n\n- Store\n> Store 是 redux存放数据的地方，每个应用有且只有一个store，比如说修改昵称那个例子，昵称字段（假设为nickName）就需要存放在store中，其他用到的页面也是从store获取，当store中的nickName更新时，所有用到的页面或组件就会自动更新。\n\n```\nimport {createStore} from 'redux'\nimport rootReducers from './reducers/index'\n\n// 创建一个storage \nconst store = createStore(\n    rootReducers,\n)\n\nexport default store\n```\n\n- Reducer\n> reducer 是用来计算组成state的纯函数，每个reducer都会接收一个旧的state和action，并且返回一个新的state，需要注意的是，reducer是一个纯函数，固定的输入会得到固定输出，因此要避免在reducer中修改传入的参数，或者使用`Date.now()`、`Math.random()`。\n```\n// reducer 接收旧的state和新的action，返回新的state\nconst counterReducer = function(state={count:1}, action) {\n    switch(action.type) {\n        case 'COUNT_ADD':\n            return {...state, count: state.count+1}\n\n        case 'COUNT_REDUCE':\n            return {...state, count: state.count-1}\n        default:\n            return state\n    }\n}\n\nexport default counterReducer\n```\n\n- Action\n> 如果需要修改state中的数据，就需要通过分发action的方式来修改`(Store.dispatch(action))`，action包含type和payload字段，type定义了action的类型，payload则是此次action携带的数据。\n\n```\n// action包含type和payload属性，reducer拿到action可以通过type进行相应的逻辑处理\nconst addAction = () => {\n    return {\n        type: 'COUNTER_ADD',\n        payload: {}\n    }\n}\n\nconst reduceAction = () =>{\n    return {\n        type: 'COUNTER_REDUCE',\n        payload: {}\n    }\n}\n\nexport {\n    addAction,\n    reduceAction,\n}\n```\n\n## redux 设计原则\n```\n1. 单一数据源：所有状态都保存在单一的store中\n2. state是只读的: 不能直接对store进行修改,只能通过新的store替换旧的store\n3. 使用纯函数来执行修改:reducer是只读的\n```\n\n![redux数据流流程图](https://tva1.sinaimg.cn/large/007S8ZIlgy1gemavjob2pg31400u0npe.gif)\n\n## react-redux 的作用\n> react-redux 能将redux那套逻辑应用在react框架上。\n\n### react-redux 核心 api\n\n- Provider\n> 通过Proveder可以把redux和react建立连接，将store传递到react项目中\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store'\nimport {Provider} from 'react-redux'\n\n\nReactDOM.render(\n    // 通过Proveder把redux和react建立连接，将store传递到react项目中\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n```\n\n- connect\n\n> 使用到store中数据的组件，需要先用connect修饰一遍\n```\n// 将 指定 的 store 合并到 props 传给组件\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        post: state.postReducer\n    }\n} \n\n// 将 指定的 dispatch 合并到 props 传给组件\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        test: ()=>{\n            dispatch(loadPostsAction)\n        }\n    }\n}\n\n// HomeScreen经过connect 包装就可以使用 mapStateToProps，mapDispatchToProps 传递过去的数据了\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen) \n```\n\n## redux-thunk 的作用\n> redux-thunk 是 redux的一个中间件，可以实现发异步action，因为有一些action携带的数据可能是由后台获取的，这时候就需要redux-thunk的协助了。\n\n- 使用中间件\n```\nimport {createStore, compose, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducers from './reducers/index'\n\n// 创建一个storage storage 接收一个参数，reducer\nconst store = createStore(\n    rootReducers,\n    compose(\n        applyMiddleware(...[thunk,]),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\nexport default store\n```\n\n- 发送异步action\n```\nimport {getPosts} from '../services/post_api'\n\nconst loadPostsAction = async (dispatch)=>{\n    const {data} = await getPosts()\n    dispatch({\n        type: 'LOAD_POSTS',\n        payload: data\n    })\n}\n\nexport {\n    loadPostsAction\n}\n```\n\n\n>本文demo：[redux使用示例](https://github.com/figureai/StudyBase/tree/master/redux.base)\n\n>参考文章： \n    [Redux for react native 指南](https://juejin.im/post/5bac26ad6fb9a05d353c8040)，\n    [Redux 入门教程（一）：基本用法](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html#comment-text)\n\n\n","source":"_posts/redux、react-redux、redux-thunk结合使用.md","raw":"\n---\ntitle: redux、react-redux、redux-thunk结合使用\ndate: 2020-05-08 15:27:09\ncategories: \ntags: []\ncomments: true\n---\n\n\n## 简单介绍\n\n- redux\n> redux是一个统一数据流状态管理的js库，本身使用与react、或者vue框架等无关。\n\n- react-redux\n> 将redux应用到react上的库。\n\n- redux-thunk\n> redux-thunk，redux 的一个中间件，可以实现在使用redux时发异步action。\n\n\n## 什么时候需要使用redux\n> 当你的应用有许多动态数据需要在不同的页面共享时，比如说当用户修改了账户昵称之后所有的相关页面都要更新昵称，面对这样的需求，如果不使用redux，则需要通过发送通知或者数据传递的方式来解决，而使用redux则可以大大简化操作。\n\n## redux 核心概念\n\n- Store\n> Store 是 redux存放数据的地方，每个应用有且只有一个store，比如说修改昵称那个例子，昵称字段（假设为nickName）就需要存放在store中，其他用到的页面也是从store获取，当store中的nickName更新时，所有用到的页面或组件就会自动更新。\n\n```\nimport {createStore} from 'redux'\nimport rootReducers from './reducers/index'\n\n// 创建一个storage \nconst store = createStore(\n    rootReducers,\n)\n\nexport default store\n```\n\n- Reducer\n> reducer 是用来计算组成state的纯函数，每个reducer都会接收一个旧的state和action，并且返回一个新的state，需要注意的是，reducer是一个纯函数，固定的输入会得到固定输出，因此要避免在reducer中修改传入的参数，或者使用`Date.now()`、`Math.random()`。\n```\n// reducer 接收旧的state和新的action，返回新的state\nconst counterReducer = function(state={count:1}, action) {\n    switch(action.type) {\n        case 'COUNT_ADD':\n            return {...state, count: state.count+1}\n\n        case 'COUNT_REDUCE':\n            return {...state, count: state.count-1}\n        default:\n            return state\n    }\n}\n\nexport default counterReducer\n```\n\n- Action\n> 如果需要修改state中的数据，就需要通过分发action的方式来修改`(Store.dispatch(action))`，action包含type和payload字段，type定义了action的类型，payload则是此次action携带的数据。\n\n```\n// action包含type和payload属性，reducer拿到action可以通过type进行相应的逻辑处理\nconst addAction = () => {\n    return {\n        type: 'COUNTER_ADD',\n        payload: {}\n    }\n}\n\nconst reduceAction = () =>{\n    return {\n        type: 'COUNTER_REDUCE',\n        payload: {}\n    }\n}\n\nexport {\n    addAction,\n    reduceAction,\n}\n```\n\n## redux 设计原则\n```\n1. 单一数据源：所有状态都保存在单一的store中\n2. state是只读的: 不能直接对store进行修改,只能通过新的store替换旧的store\n3. 使用纯函数来执行修改:reducer是只读的\n```\n\n![redux数据流流程图](https://tva1.sinaimg.cn/large/007S8ZIlgy1gemavjob2pg31400u0npe.gif)\n\n## react-redux 的作用\n> react-redux 能将redux那套逻辑应用在react框架上。\n\n### react-redux 核心 api\n\n- Provider\n> 通过Proveder可以把redux和react建立连接，将store传递到react项目中\n\n```\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport store from './store'\nimport {Provider} from 'react-redux'\n\n\nReactDOM.render(\n    // 通过Proveder把redux和react建立连接，将store传递到react项目中\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n```\n\n- connect\n\n> 使用到store中数据的组件，需要先用connect修饰一遍\n```\n// 将 指定 的 store 合并到 props 传给组件\nconst mapStateToProps = (state, ownProps) => {\n    return {\n        post: state.postReducer\n    }\n} \n\n// 将 指定的 dispatch 合并到 props 传给组件\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    return {\n        test: ()=>{\n            dispatch(loadPostsAction)\n        }\n    }\n}\n\n// HomeScreen经过connect 包装就可以使用 mapStateToProps，mapDispatchToProps 传递过去的数据了\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeScreen) \n```\n\n## redux-thunk 的作用\n> redux-thunk 是 redux的一个中间件，可以实现发异步action，因为有一些action携带的数据可能是由后台获取的，这时候就需要redux-thunk的协助了。\n\n- 使用中间件\n```\nimport {createStore, compose, applyMiddleware} from 'redux'\nimport thunk from 'redux-thunk'\nimport rootReducers from './reducers/index'\n\n// 创建一个storage storage 接收一个参数，reducer\nconst store = createStore(\n    rootReducers,\n    compose(\n        applyMiddleware(...[thunk,]),\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__(),\n    )\n)\n\nexport default store\n```\n\n- 发送异步action\n```\nimport {getPosts} from '../services/post_api'\n\nconst loadPostsAction = async (dispatch)=>{\n    const {data} = await getPosts()\n    dispatch({\n        type: 'LOAD_POSTS',\n        payload: data\n    })\n}\n\nexport {\n    loadPostsAction\n}\n```\n\n\n>本文demo：[redux使用示例](https://github.com/figureai/StudyBase/tree/master/redux.base)\n\n>参考文章： \n    [Redux for react native 指南](https://juejin.im/post/5bac26ad6fb9a05d353c8040)，\n    [Redux 入门教程（一）：基本用法](http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html#comment-text)\n\n\n","slug":"redux、react-redux、redux-thunk结合使用","published":1,"updated":"2020-06-23T08:43:50.912Z","layout":"post","photos":[],"link":"","_id":"ckbrouqu3000n1loscamddauj","content":"<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><ul>\n<li><p>redux</p>\n<blockquote>\n<p>redux是一个统一数据流状态管理的js库，本身使用与react、或者vue框架等无关。</p>\n</blockquote>\n</li>\n<li><p>react-redux</p>\n<blockquote>\n<p>将redux应用到react上的库。</p>\n</blockquote>\n</li>\n<li><p>redux-thunk</p>\n<blockquote>\n<p>redux-thunk，redux 的一个中间件，可以实现在使用redux时发异步action。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"什么时候需要使用redux\"><a href=\"#什么时候需要使用redux\" class=\"headerlink\" title=\"什么时候需要使用redux\"></a>什么时候需要使用redux</h2><blockquote>\n<p>当你的应用有许多动态数据需要在不同的页面共享时，比如说当用户修改了账户昵称之后所有的相关页面都要更新昵称，面对这样的需求，如果不使用redux，则需要通过发送通知或者数据传递的方式来解决，而使用redux则可以大大简化操作。</p>\n</blockquote>\n<h2 id=\"redux-核心概念\"><a href=\"#redux-核心概念\" class=\"headerlink\" title=\"redux 核心概念\"></a>redux 核心概念</h2><ul>\n<li>Store<blockquote>\n<p>Store 是 redux存放数据的地方，每个应用有且只有一个store，比如说修改昵称那个例子，昵称字段（假设为nickName）就需要存放在store中，其他用到的页面也是从store获取，当store中的nickName更新时，所有用到的页面或组件就会自动更新。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore&#125; from &#39;redux&#39;</span><br><span class=\"line\">import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建一个storage </span><br><span class=\"line\">const store &#x3D; createStore(</span><br><span class=\"line\">    rootReducers,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Reducer</p>\n<blockquote>\n<p>reducer 是用来计算组成state的纯函数，每个reducer都会接收一个旧的state和action，并且返回一个新的state，需要注意的是，reducer是一个纯函数，固定的输入会得到固定输出，因此要避免在reducer中修改传入的参数，或者使用<code>Date.now()</code>、<code>Math.random()</code>。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; reducer 接收旧的state和新的action，返回新的state</span><br><span class=\"line\">const counterReducer &#x3D; function(state&#x3D;&#123;count:1&#125;, action) &#123;</span><br><span class=\"line\">    switch(action.type) &#123;</span><br><span class=\"line\">        case &#39;COUNT_ADD&#39;:</span><br><span class=\"line\">            return &#123;...state, count: state.count+1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case &#39;COUNT_REDUCE&#39;:</span><br><span class=\"line\">            return &#123;...state, count: state.count-1&#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default counterReducer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Action</p>\n<blockquote>\n<p>如果需要修改state中的数据，就需要通过分发action的方式来修改<code>(Store.dispatch(action))</code>，action包含type和payload字段，type定义了action的类型，payload则是此次action携带的数据。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; action包含type和payload属性，reducer拿到action可以通过type进行相应的逻辑处理</span><br><span class=\"line\">const addAction &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &#39;COUNTER_ADD&#39;,</span><br><span class=\"line\">        payload: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const reduceAction &#x3D; () &#x3D;&gt;&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &#39;COUNTER_REDUCE&#39;,</span><br><span class=\"line\">        payload: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    addAction,</span><br><span class=\"line\">    reduceAction,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redux-设计原则\"><a href=\"#redux-设计原则\" class=\"headerlink\" title=\"redux 设计原则\"></a>redux 设计原则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 单一数据源：所有状态都保存在单一的store中</span><br><span class=\"line\">2. state是只读的: 不能直接对store进行修改,只能通过新的store替换旧的store</span><br><span class=\"line\">3. 使用纯函数来执行修改:reducer是只读的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gemavjob2pg31400u0npe.gif\" alt=\"redux数据流流程图\"></p>\n<h2 id=\"react-redux-的作用\"><a href=\"#react-redux-的作用\" class=\"headerlink\" title=\"react-redux 的作用\"></a>react-redux 的作用</h2><blockquote>\n<p>react-redux 能将redux那套逻辑应用在react框架上。</p>\n</blockquote>\n<h3 id=\"react-redux-核心-api\"><a href=\"#react-redux-核心-api\" class=\"headerlink\" title=\"react-redux 核心 api\"></a>react-redux 核心 api</h3><ul>\n<li>Provider<blockquote>\n<p>通过Proveder可以把redux和react建立连接，将store传递到react项目中</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;</span><br><span class=\"line\">import &#123;Provider&#125; from &#39;react-redux&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &#x2F;&#x2F; 通过Proveder把redux和react建立连接，将store传递到react项目中</span><br><span class=\"line\">    &lt;Provider store&#x3D;&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;App &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;Provider&gt;, </span><br><span class=\"line\">    document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>connect</li>\n</ul>\n<blockquote>\n<p>使用到store中数据的组件，需要先用connect修饰一遍</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将 指定 的 store 合并到 props 传给组件</span><br><span class=\"line\">const mapStateToProps &#x3D; (state, ownProps) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        post: state.postReducer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将 指定的 dispatch 合并到 props 传给组件</span><br><span class=\"line\">const mapDispatchToProps &#x3D; (dispatch, ownProps) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        test: ()&#x3D;&gt;&#123;</span><br><span class=\"line\">            dispatch(loadPostsAction)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; HomeScreen经过connect 包装就可以使用 mapStateToProps，mapDispatchToProps 传递过去的数据了</span><br><span class=\"line\">export default connect(mapStateToProps, mapDispatchToProps)(HomeScreen)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redux-thunk-的作用\"><a href=\"#redux-thunk-的作用\" class=\"headerlink\" title=\"redux-thunk 的作用\"></a>redux-thunk 的作用</h2><blockquote>\n<p>redux-thunk 是 redux的一个中间件，可以实现发异步action，因为有一些action携带的数据可能是由后台获取的，这时候就需要redux-thunk的协助了。</p>\n</blockquote>\n<ul>\n<li><p>使用中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore, compose, applyMiddleware&#125; from &#39;redux&#39;</span><br><span class=\"line\">import thunk from &#39;redux-thunk&#39;</span><br><span class=\"line\">import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建一个storage storage 接收一个参数，reducer</span><br><span class=\"line\">const store &#x3D; createStore(</span><br><span class=\"line\">    rootReducers,</span><br><span class=\"line\">    compose(</span><br><span class=\"line\">        applyMiddleware(...[thunk,]),</span><br><span class=\"line\">        window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__(),</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发送异步action</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;getPosts&#125; from &#39;..&#x2F;services&#x2F;post_api&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">const loadPostsAction &#x3D; async (dispatch)&#x3D;&gt;&#123;</span><br><span class=\"line\">    const &#123;data&#125; &#x3D; await getPosts()</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        type: &#39;LOAD_POSTS&#39;,</span><br><span class=\"line\">        payload: data</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    loadPostsAction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<blockquote>\n<p>本文demo：<a href=\"https://github.com/figureai/StudyBase/tree/master/redux.base\" target=\"_blank\" rel=\"noopener\">redux使用示例</a></p>\n</blockquote>\n<blockquote>\n<p>参考文章：<br>    <a href=\"https://juejin.im/post/5bac26ad6fb9a05d353c8040\" target=\"_blank\" rel=\"noopener\">Redux for react native 指南</a>，<br>    <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html#comment-text\" target=\"_blank\" rel=\"noopener\">Redux 入门教程（一）：基本用法</a></p>\n</blockquote>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h2 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h2><ul>\n<li><p>redux</p>\n<blockquote>\n<p>redux是一个统一数据流状态管理的js库，本身使用与react、或者vue框架等无关。</p>\n</blockquote>\n</li>\n<li><p>react-redux</p>\n<blockquote>\n<p>将redux应用到react上的库。</p>\n</blockquote>\n</li>\n<li><p>redux-thunk</p>\n<blockquote>\n<p>redux-thunk，redux 的一个中间件，可以实现在使用redux时发异步action。</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"什么时候需要使用redux\"><a href=\"#什么时候需要使用redux\" class=\"headerlink\" title=\"什么时候需要使用redux\"></a>什么时候需要使用redux</h2><blockquote>\n<p>当你的应用有许多动态数据需要在不同的页面共享时，比如说当用户修改了账户昵称之后所有的相关页面都要更新昵称，面对这样的需求，如果不使用redux，则需要通过发送通知或者数据传递的方式来解决，而使用redux则可以大大简化操作。</p>\n</blockquote>\n<h2 id=\"redux-核心概念\"><a href=\"#redux-核心概念\" class=\"headerlink\" title=\"redux 核心概念\"></a>redux 核心概念</h2><ul>\n<li>Store<blockquote>\n<p>Store 是 redux存放数据的地方，每个应用有且只有一个store，比如说修改昵称那个例子，昵称字段（假设为nickName）就需要存放在store中，其他用到的页面也是从store获取，当store中的nickName更新时，所有用到的页面或组件就会自动更新。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore&#125; from &#39;redux&#39;</span><br><span class=\"line\">import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建一个storage </span><br><span class=\"line\">const store &#x3D; createStore(</span><br><span class=\"line\">    rootReducers,</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>Reducer</p>\n<blockquote>\n<p>reducer 是用来计算组成state的纯函数，每个reducer都会接收一个旧的state和action，并且返回一个新的state，需要注意的是，reducer是一个纯函数，固定的输入会得到固定输出，因此要避免在reducer中修改传入的参数，或者使用<code>Date.now()</code>、<code>Math.random()</code>。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; reducer 接收旧的state和新的action，返回新的state</span><br><span class=\"line\">const counterReducer &#x3D; function(state&#x3D;&#123;count:1&#125;, action) &#123;</span><br><span class=\"line\">    switch(action.type) &#123;</span><br><span class=\"line\">        case &#39;COUNT_ADD&#39;:</span><br><span class=\"line\">            return &#123;...state, count: state.count+1&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case &#39;COUNT_REDUCE&#39;:</span><br><span class=\"line\">            return &#123;...state, count: state.count-1&#125;</span><br><span class=\"line\">        default:</span><br><span class=\"line\">            return state</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export default counterReducer</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Action</p>\n<blockquote>\n<p>如果需要修改state中的数据，就需要通过分发action的方式来修改<code>(Store.dispatch(action))</code>，action包含type和payload字段，type定义了action的类型，payload则是此次action携带的数据。</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; action包含type和payload属性，reducer拿到action可以通过type进行相应的逻辑处理</span><br><span class=\"line\">const addAction &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &#39;COUNTER_ADD&#39;,</span><br><span class=\"line\">        payload: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const reduceAction &#x3D; () &#x3D;&gt;&#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        type: &#39;COUNTER_REDUCE&#39;,</span><br><span class=\"line\">        payload: &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    addAction,</span><br><span class=\"line\">    reduceAction,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redux-设计原则\"><a href=\"#redux-设计原则\" class=\"headerlink\" title=\"redux 设计原则\"></a>redux 设计原则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 单一数据源：所有状态都保存在单一的store中</span><br><span class=\"line\">2. state是只读的: 不能直接对store进行修改,只能通过新的store替换旧的store</span><br><span class=\"line\">3. 使用纯函数来执行修改:reducer是只读的</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/007S8ZIlgy1gemavjob2pg31400u0npe.gif\" alt=\"redux数据流流程图\"></p>\n<h2 id=\"react-redux-的作用\"><a href=\"#react-redux-的作用\" class=\"headerlink\" title=\"react-redux 的作用\"></a>react-redux 的作用</h2><blockquote>\n<p>react-redux 能将redux那套逻辑应用在react框架上。</p>\n</blockquote>\n<h3 id=\"react-redux-核心-api\"><a href=\"#react-redux-核心-api\" class=\"headerlink\" title=\"react-redux 核心 api\"></a>react-redux 核心 api</h3><ul>\n<li>Provider<blockquote>\n<p>通过Proveder可以把redux和react建立连接，将store传递到react项目中</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;;</span><br><span class=\"line\">import ReactDOM from &#39;react-dom&#39;;</span><br><span class=\"line\">import App from &#39;.&#x2F;App&#39;;</span><br><span class=\"line\">import store from &#39;.&#x2F;store&#39;</span><br><span class=\"line\">import &#123;Provider&#125; from &#39;react-redux&#39;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">    &#x2F;&#x2F; 通过Proveder把redux和react建立连接，将store传递到react项目中</span><br><span class=\"line\">    &lt;Provider store&#x3D;&#123;store&#125;&gt;</span><br><span class=\"line\">        &lt;App &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;Provider&gt;, </span><br><span class=\"line\">    document.getElementById(&#39;root&#39;));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>connect</li>\n</ul>\n<blockquote>\n<p>使用到store中数据的组件，需要先用connect修饰一遍</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 将 指定 的 store 合并到 props 传给组件</span><br><span class=\"line\">const mapStateToProps &#x3D; (state, ownProps) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        post: state.postReducer</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 将 指定的 dispatch 合并到 props 传给组件</span><br><span class=\"line\">const mapDispatchToProps &#x3D; (dispatch, ownProps) &#x3D;&gt; &#123;</span><br><span class=\"line\">    return &#123;</span><br><span class=\"line\">        test: ()&#x3D;&gt;&#123;</span><br><span class=\"line\">            dispatch(loadPostsAction)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; HomeScreen经过connect 包装就可以使用 mapStateToProps，mapDispatchToProps 传递过去的数据了</span><br><span class=\"line\">export default connect(mapStateToProps, mapDispatchToProps)(HomeScreen)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"redux-thunk-的作用\"><a href=\"#redux-thunk-的作用\" class=\"headerlink\" title=\"redux-thunk 的作用\"></a>redux-thunk 的作用</h2><blockquote>\n<p>redux-thunk 是 redux的一个中间件，可以实现发异步action，因为有一些action携带的数据可能是由后台获取的，这时候就需要redux-thunk的协助了。</p>\n</blockquote>\n<ul>\n<li><p>使用中间件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;createStore, compose, applyMiddleware&#125; from &#39;redux&#39;</span><br><span class=\"line\">import thunk from &#39;redux-thunk&#39;</span><br><span class=\"line\">import rootReducers from &#39;.&#x2F;reducers&#x2F;index&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 创建一个storage storage 接收一个参数，reducer</span><br><span class=\"line\">const store &#x3D; createStore(</span><br><span class=\"line\">    rootReducers,</span><br><span class=\"line\">    compose(</span><br><span class=\"line\">        applyMiddleware(...[thunk,]),</span><br><span class=\"line\">        window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__(),</span><br><span class=\"line\">    )</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">export default store</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>发送异步action</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123;getPosts&#125; from &#39;..&#x2F;services&#x2F;post_api&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">const loadPostsAction &#x3D; async (dispatch)&#x3D;&gt;&#123;</span><br><span class=\"line\">    const &#123;data&#125; &#x3D; await getPosts()</span><br><span class=\"line\">    dispatch(&#123;</span><br><span class=\"line\">        type: &#39;LOAD_POSTS&#39;,</span><br><span class=\"line\">        payload: data</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">export &#123;</span><br><span class=\"line\">    loadPostsAction</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<blockquote>\n<p>本文demo：<a href=\"https://github.com/figureai/StudyBase/tree/master/redux.base\" target=\"_blank\" rel=\"noopener\">redux使用示例</a></p>\n</blockquote>\n<blockquote>\n<p>参考文章：<br>    <a href=\"https://juejin.im/post/5bac26ad6fb9a05d353c8040\" target=\"_blank\" rel=\"noopener\">Redux for react native 指南</a>，<br>    <a href=\"http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_one_basic_usages.html#comment-text\" target=\"_blank\" rel=\"noopener\">Redux 入门教程（一）：基本用法</a></p>\n</blockquote>\n"},{"title":"js | 有趣的笔试题","date":"2020-03-24T06:27:41.000Z","comments":1,"_content":"\n**请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象**\n\n```\nvar url = \"http://www.taobao.com/index.php?key0=0&key1=1&key2=2.....\"\nvar obj = parseQueryString(url);\nconsole.log(obj.key0)\n```\n\n答案\n\n```\nfunction parseQueryString(url) {\n    const result = url.split('?')\n    if(result.length < 2) {\n        return {}\n    }\n    const queryStr = result[1]\n    const queryArray = queryStr.split('&')\n    let dict = {}\n    queryArray.forEach(element => {\n        const keyValues = element.split('=')\n        dict[keyValues[0]] = keyValues[1]\n    });\n    return dict\n}\n```\n\n**尝试实现注释部分的 Javascript 代码，可在其他任何地方添加更多代码（如不能实现，说明一下不能实现的原因）：**\n\n```\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        alert(this.msg);\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n    }\n}\n```\n\n答案\n\n```\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        // alert(this.msg);\n        console.log(this.msg)\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n        setTimeout(()=>this.shout(), 5000)\n    }\n    return this\n}\n\nconst obj = Obj('hello')\nobj.waitAndShout()\n```\n\n**请给 JavaScript 的 String 原生对象添加一个名为 trim 的原型方法，用于截取空白字符。要求：**\n\n```\nconsole.log(\" taobao\".trim());     // 输出 \"taobao\"\nconsole.log(\" taobao \".trim());    // 输出 \"taobao\"\n```\n\n答案\n\n```\nString.prototype.trim = function() {\n    return this.split(' ').join('')\n}\n```\n\n**请说明下面各种情况的执行结果，并注明产生对应结果的理由。**\n\n```\nfunction doSomething() {\n    console.log(this);\n}\nelement.onclick = doSomething // 1. 点击element元素后。 \nelement.onclick = function() {doSomething()} // 2. 点击element元素后。 \ndoSomething()   // 3.\n```\n\n```\n1. 通过函数赋值方式，this直接指向element对象\n2. this 是写在doSomething()里边的，而this的指向又跟谁调用它有关，如果没有对象调用它，就是指向window\n3. this指向window\n```\n","source":"_posts/js | 有趣的笔试题.md","raw":"---\ntitle: js | 有趣的笔试题\ndate: 2020-03-24 14:27:41\ncategories:\ntags: [js]\ncomments: true\n---\n\n**请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象**\n\n```\nvar url = \"http://www.taobao.com/index.php?key0=0&key1=1&key2=2.....\"\nvar obj = parseQueryString(url);\nconsole.log(obj.key0)\n```\n\n答案\n\n```\nfunction parseQueryString(url) {\n    const result = url.split('?')\n    if(result.length < 2) {\n        return {}\n    }\n    const queryStr = result[1]\n    const queryArray = queryStr.split('&')\n    let dict = {}\n    queryArray.forEach(element => {\n        const keyValues = element.split('=')\n        dict[keyValues[0]] = keyValues[1]\n    });\n    return dict\n}\n```\n\n**尝试实现注释部分的 Javascript 代码，可在其他任何地方添加更多代码（如不能实现，说明一下不能实现的原因）：**\n\n```\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        alert(this.msg);\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n    }\n}\n```\n\n答案\n\n```\nvar Obj = function(msg){\n    this.msg = msg;\n    this.shout = function(){\n        // alert(this.msg);\n        console.log(this.msg)\n    }\n    this.waitAndShout = function(){\n        //隔五秒钟后执行上面的shout方法\n        setTimeout(()=>this.shout(), 5000)\n    }\n    return this\n}\n\nconst obj = Obj('hello')\nobj.waitAndShout()\n```\n\n**请给 JavaScript 的 String 原生对象添加一个名为 trim 的原型方法，用于截取空白字符。要求：**\n\n```\nconsole.log(\" taobao\".trim());     // 输出 \"taobao\"\nconsole.log(\" taobao \".trim());    // 输出 \"taobao\"\n```\n\n答案\n\n```\nString.prototype.trim = function() {\n    return this.split(' ').join('')\n}\n```\n\n**请说明下面各种情况的执行结果，并注明产生对应结果的理由。**\n\n```\nfunction doSomething() {\n    console.log(this);\n}\nelement.onclick = doSomething // 1. 点击element元素后。 \nelement.onclick = function() {doSomething()} // 2. 点击element元素后。 \ndoSomething()   // 3.\n```\n\n```\n1. 通过函数赋值方式，this直接指向element对象\n2. this 是写在doSomething()里边的，而this的指向又跟谁调用它有关，如果没有对象调用它，就是指向window\n3. this指向window\n```\n","slug":"js | 有趣的笔试题","published":1,"updated":"2020-04-03T05:31:59.345Z","layout":"post","photos":[],"link":"","_id":"ckbrouqu4000p1los2fgz4rcr","content":"<p><strong>请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url &#x3D; &quot;http:&#x2F;&#x2F;www.taobao.com&#x2F;index.php?key0&#x3D;0&amp;key1&#x3D;1&amp;key2&#x3D;2.....&quot;</span><br><span class=\"line\">var obj &#x3D; parseQueryString(url);</span><br><span class=\"line\">console.log(obj.key0)</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parseQueryString(url) &#123;</span><br><span class=\"line\">    const result &#x3D; url.split(&#39;?&#39;)</span><br><span class=\"line\">    if(result.length &lt; 2) &#123;</span><br><span class=\"line\">        return &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const queryStr &#x3D; result[1]</span><br><span class=\"line\">    const queryArray &#x3D; queryStr.split(&#39;&amp;&#39;)</span><br><span class=\"line\">    let dict &#x3D; &#123;&#125;</span><br><span class=\"line\">    queryArray.forEach(element &#x3D;&gt; &#123;</span><br><span class=\"line\">        const keyValues &#x3D; element.split(&#39;&#x3D;&#39;)</span><br><span class=\"line\">        dict[keyValues[0]] &#x3D; keyValues[1]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return dict</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>尝试实现注释部分的 Javascript 代码，可在其他任何地方添加更多代码（如不能实现，说明一下不能实现的原因）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Obj &#x3D; function(msg)&#123;</span><br><span class=\"line\">    this.msg &#x3D; msg;</span><br><span class=\"line\">    this.shout &#x3D; function()&#123;</span><br><span class=\"line\">        alert(this.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.waitAndShout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;隔五秒钟后执行上面的shout方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Obj &#x3D; function(msg)&#123;</span><br><span class=\"line\">    this.msg &#x3D; msg;</span><br><span class=\"line\">    this.shout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; alert(this.msg);</span><br><span class=\"line\">        console.log(this.msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.waitAndShout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;隔五秒钟后执行上面的shout方法</span><br><span class=\"line\">        setTimeout(()&#x3D;&gt;this.shout(), 5000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj &#x3D; Obj(&#39;hello&#39;)</span><br><span class=\"line\">obj.waitAndShout()</span><br></pre></td></tr></table></figure>\n\n<p><strong>请给 JavaScript 的 String 原生对象添加一个名为 trim 的原型方法，用于截取空白字符。要求：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot; taobao&quot;.trim());     &#x2F;&#x2F; 输出 &quot;taobao&quot;</span><br><span class=\"line\">console.log(&quot; taobao &quot;.trim());    &#x2F;&#x2F; 输出 &quot;taobao&quot;</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.trim &#x3D; function() &#123;</span><br><span class=\"line\">    return this.split(&#39; &#39;).join(&#39;&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>请说明下面各种情况的执行结果，并注明产生对应结果的理由。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">element.onclick &#x3D; doSomething &#x2F;&#x2F; 1. 点击element元素后。 </span><br><span class=\"line\">element.onclick &#x3D; function() &#123;doSomething()&#125; &#x2F;&#x2F; 2. 点击element元素后。 </span><br><span class=\"line\">doSomething()   &#x2F;&#x2F; 3.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 通过函数赋值方式，this直接指向element对象</span><br><span class=\"line\">2. this 是写在doSomething()里边的，而this的指向又跟谁调用它有关，如果没有对象调用它，就是指向window</span><br><span class=\"line\">3. this指向window</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<p><strong>请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var url &#x3D; &quot;http:&#x2F;&#x2F;www.taobao.com&#x2F;index.php?key0&#x3D;0&amp;key1&#x3D;1&amp;key2&#x3D;2.....&quot;</span><br><span class=\"line\">var obj &#x3D; parseQueryString(url);</span><br><span class=\"line\">console.log(obj.key0)</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function parseQueryString(url) &#123;</span><br><span class=\"line\">    const result &#x3D; url.split(&#39;?&#39;)</span><br><span class=\"line\">    if(result.length &lt; 2) &#123;</span><br><span class=\"line\">        return &#123;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    const queryStr &#x3D; result[1]</span><br><span class=\"line\">    const queryArray &#x3D; queryStr.split(&#39;&amp;&#39;)</span><br><span class=\"line\">    let dict &#x3D; &#123;&#125;</span><br><span class=\"line\">    queryArray.forEach(element &#x3D;&gt; &#123;</span><br><span class=\"line\">        const keyValues &#x3D; element.split(&#39;&#x3D;&#39;)</span><br><span class=\"line\">        dict[keyValues[0]] &#x3D; keyValues[1]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    return dict</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>尝试实现注释部分的 Javascript 代码，可在其他任何地方添加更多代码（如不能实现，说明一下不能实现的原因）：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Obj &#x3D; function(msg)&#123;</span><br><span class=\"line\">    this.msg &#x3D; msg;</span><br><span class=\"line\">    this.shout &#x3D; function()&#123;</span><br><span class=\"line\">        alert(this.msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.waitAndShout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;隔五秒钟后执行上面的shout方法</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Obj &#x3D; function(msg)&#123;</span><br><span class=\"line\">    this.msg &#x3D; msg;</span><br><span class=\"line\">    this.shout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F; alert(this.msg);</span><br><span class=\"line\">        console.log(this.msg)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    this.waitAndShout &#x3D; function()&#123;</span><br><span class=\"line\">        &#x2F;&#x2F;隔五秒钟后执行上面的shout方法</span><br><span class=\"line\">        setTimeout(()&#x3D;&gt;this.shout(), 5000)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const obj &#x3D; Obj(&#39;hello&#39;)</span><br><span class=\"line\">obj.waitAndShout()</span><br></pre></td></tr></table></figure>\n\n<p><strong>请给 JavaScript 的 String 原生对象添加一个名为 trim 的原型方法，用于截取空白字符。要求：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">console.log(&quot; taobao&quot;.trim());     &#x2F;&#x2F; 输出 &quot;taobao&quot;</span><br><span class=\"line\">console.log(&quot; taobao &quot;.trim());    &#x2F;&#x2F; 输出 &quot;taobao&quot;</span><br></pre></td></tr></table></figure>\n\n<p>答案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String.prototype.trim &#x3D; function() &#123;</span><br><span class=\"line\">    return this.split(&#39; &#39;).join(&#39;&#39;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>请说明下面各种情况的执行结果，并注明产生对应结果的理由。</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function doSomething() &#123;</span><br><span class=\"line\">    console.log(this);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">element.onclick &#x3D; doSomething &#x2F;&#x2F; 1. 点击element元素后。 </span><br><span class=\"line\">element.onclick &#x3D; function() &#123;doSomething()&#125; &#x2F;&#x2F; 2. 点击element元素后。 </span><br><span class=\"line\">doSomething()   &#x2F;&#x2F; 3.</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 通过函数赋值方式，this直接指向element对象</span><br><span class=\"line\">2. this 是写在doSomething()里边的，而this的指向又跟谁调用它有关，如果没有对象调用它，就是指向window</span><br><span class=\"line\">3. this指向window</span><br></pre></td></tr></table></figure>\n"},{"title":"js | 正则表达式的基本使用","date":"2020-03-20T06:53:45.000Z","comments":1,"_content":"\n# 正则表达式的使用\n\n> 本文整理了一些常用的正则表达式匹配符，使用的示例代码为 js 编写，参考文章 [正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)，[MDN 文档-正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expression)\n\n## 正则表达式规则类型\n\n- 断言\n\n  > 表示一个匹配在某些条件发生\n\n- 边界\n\n  > 表示行和单词的的开始和结尾，如：`^ 匹配起始位置` ，`$ 匹配结束位置`\n\n- 字符类别\n\n  > 区分不同类型的字符，如： `\\D 匹配一个非数字字符`，`\\d 匹配一个数字字符`\n\n- 组合范围\n\n  > 表示表达式的分组和范围，如: `[a-e0-4] 匹配a-e之间的字符以及0-4的数字`\n\n- 量词\n\n  > 表示匹配的字符或表达式的数量， 如： `a{3,4} 匹配3个或4个字母a的字符`\n\n- unicode 属性转义\n  > 基于 unicode 字符属性区分字符\n\n## 常用的匹配规则\n\n> 以下列的是常用匹配规则，完整的匹配规则可参考：[正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n```\n\n\\S     : 匹配任意非空字符\n.      : 匹配 \\n 之外的任何字符\n\\D     : 匹配一个非数字字符，等价于[^0-9]\n\\d     : 匹配个数字字符，等价于[0-9]\n[0-9]  : 匹配一个数字字符\n^      : 限定字符串的起始字符， 例如  ^a 限定匹配的字符串必须以 a 开头\n$      : 限定字符串的结束字符，例如 b$ 字符串必须以b结束\n\\w      : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]\n{}      : 匹配指定次数，eg: a{3,6}，最低匹配三个字符a，最高匹配6个字符a\n()      : 优先匹配括号中的内容\n+       : 至少匹配一次，等价于{1,}\n\n```\n\n## 全局匹配模式\n\n> 全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容\n\n```\nconst str = '123bb456bb789'\n\n// 输出 [ 'bb', 'bb' ]\nconsole.log(str.match(/bb/g))\n\nconst reg = new RegExp(\"bb\",\"g\")\n// 输出 [ 'bb', index: 3, input: '123bb4567bb89', groups: undefined ]\nconsole.log(reg.exec(str))\n\n```\n\n## js 字符串支持正则表达式的方法\n\n```\nconst str = '123bb456d789'\n\n// search(reg): 检索与reg相匹配的值\n// 输出： 3\nconsole.log(str.search(/b{2}/))\n\n// match(reg): 找到一个或多个reg匹配的值\n// 输出： [ '456', index: 5, input: '123bb456d789', groups: undefined ]\nconsole.log(str.match(/[4-6]{3}/))\n\n// replace(reg, str): 替换与reg匹配的值为str的内容\n// 输出： 123bb4561119\nconsole.log(str.replace(/d[7-8]{2}/, '111'))\n\n// split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组\n// 输出： [ '123bb', 'd789' ]\nconsole.log(str.split(/456/, 2))\n\n```\n\n## js RegExp 对象\n\n```\ncomplie: 编译正则表达式。\nexec: 检索字符串中指定的值。返回找到的值，并确定其位置。\ntest: 检索字符串中指定的值。返回 true 或 false。\n```\n\n## 常用的正则表达式\n\n```\n// 获取网络链接中的某个参数值\n// gcGetUrlParam（url,params） {\n//     var reg = new RegExp(\"(^|&)\" + params + \"=([^&]*)(&|$)\");\n//     var result = url.search.substr(1).match(reg);\n//     if (result && result[2]) {\n//         return result[2];\n//     }\n//     return false;\n// }\n\n// 裁剪xx到xx之间的任意内容\n// let url = https://www.v.qq.com/?vid=adfadsfds2243&test=true\n// let reg = /vid=(.*?)&/\n// let vid = url.match(reg)[1]\n\n// 验证手机号码正则\n// let reg = /^1([3-8])(\\d{9})$/\n// let test = '13160694978'\n// let a = reg.exec(test)\n// console.log(a)\n\n// 验证邮箱的正则\n// let reg = /^((\\S|_|-){2,10})@(\\S{2,6})(.com)$/\n// let test = 'some_one@gmail.com'\n// let a = reg.exec(test)\n// console.log(a)\n\n// 匹配任意重复字符\n// var s = 'aaabccc11fdsaa';\n// var reg = /(.)\\1+/g;\n// console.log(s.match(reg)); //[\"aaa\", \"ccc\", \"11\"]\n```\n","source":"_posts/js | 正则表达式的基本使用.md","raw":"---\ntitle: js | 正则表达式的基本使用\ndate: 2020-03-20 14:53:45\ncategories: 编程通用\ntags: [基础]\ncomments: true\n---\n\n# 正则表达式的使用\n\n> 本文整理了一些常用的正则表达式匹配符，使用的示例代码为 js 编写，参考文章 [正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)，[MDN 文档-正则表达式](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expression)\n\n## 正则表达式规则类型\n\n- 断言\n\n  > 表示一个匹配在某些条件发生\n\n- 边界\n\n  > 表示行和单词的的开始和结尾，如：`^ 匹配起始位置` ，`$ 匹配结束位置`\n\n- 字符类别\n\n  > 区分不同类型的字符，如： `\\D 匹配一个非数字字符`，`\\d 匹配一个数字字符`\n\n- 组合范围\n\n  > 表示表达式的分组和范围，如: `[a-e0-4] 匹配a-e之间的字符以及0-4的数字`\n\n- 量词\n\n  > 表示匹配的字符或表达式的数量， 如： `a{3,4} 匹配3个或4个字母a的字符`\n\n- unicode 属性转义\n  > 基于 unicode 字符属性区分字符\n\n## 常用的匹配规则\n\n> 以下列的是常用匹配规则，完整的匹配规则可参考：[正则表达式手册](https://tool.oschina.net/uploads/apidocs/jquery/regexp.html)\n\n```\n\n\\S     : 匹配任意非空字符\n.      : 匹配 \\n 之外的任何字符\n\\D     : 匹配一个非数字字符，等价于[^0-9]\n\\d     : 匹配个数字字符，等价于[0-9]\n[0-9]  : 匹配一个数字字符\n^      : 限定字符串的起始字符， 例如  ^a 限定匹配的字符串必须以 a 开头\n$      : 限定字符串的结束字符，例如 b$ 字符串必须以b结束\n\\w      : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]\n{}      : 匹配指定次数，eg: a{3,6}，最低匹配三个字符a，最高匹配6个字符a\n()      : 优先匹配括号中的内容\n+       : 至少匹配一次，等价于{1,}\n\n```\n\n## 全局匹配模式\n\n> 全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容\n\n```\nconst str = '123bb456bb789'\n\n// 输出 [ 'bb', 'bb' ]\nconsole.log(str.match(/bb/g))\n\nconst reg = new RegExp(\"bb\",\"g\")\n// 输出 [ 'bb', index: 3, input: '123bb4567bb89', groups: undefined ]\nconsole.log(reg.exec(str))\n\n```\n\n## js 字符串支持正则表达式的方法\n\n```\nconst str = '123bb456d789'\n\n// search(reg): 检索与reg相匹配的值\n// 输出： 3\nconsole.log(str.search(/b{2}/))\n\n// match(reg): 找到一个或多个reg匹配的值\n// 输出： [ '456', index: 5, input: '123bb456d789', groups: undefined ]\nconsole.log(str.match(/[4-6]{3}/))\n\n// replace(reg, str): 替换与reg匹配的值为str的内容\n// 输出： 123bb4561119\nconsole.log(str.replace(/d[7-8]{2}/, '111'))\n\n// split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组\n// 输出： [ '123bb', 'd789' ]\nconsole.log(str.split(/456/, 2))\n\n```\n\n## js RegExp 对象\n\n```\ncomplie: 编译正则表达式。\nexec: 检索字符串中指定的值。返回找到的值，并确定其位置。\ntest: 检索字符串中指定的值。返回 true 或 false。\n```\n\n## 常用的正则表达式\n\n```\n// 获取网络链接中的某个参数值\n// gcGetUrlParam（url,params） {\n//     var reg = new RegExp(\"(^|&)\" + params + \"=([^&]*)(&|$)\");\n//     var result = url.search.substr(1).match(reg);\n//     if (result && result[2]) {\n//         return result[2];\n//     }\n//     return false;\n// }\n\n// 裁剪xx到xx之间的任意内容\n// let url = https://www.v.qq.com/?vid=adfadsfds2243&test=true\n// let reg = /vid=(.*?)&/\n// let vid = url.match(reg)[1]\n\n// 验证手机号码正则\n// let reg = /^1([3-8])(\\d{9})$/\n// let test = '13160694978'\n// let a = reg.exec(test)\n// console.log(a)\n\n// 验证邮箱的正则\n// let reg = /^((\\S|_|-){2,10})@(\\S{2,6})(.com)$/\n// let test = 'some_one@gmail.com'\n// let a = reg.exec(test)\n// console.log(a)\n\n// 匹配任意重复字符\n// var s = 'aaabccc11fdsaa';\n// var reg = /(.)\\1+/g;\n// console.log(s.match(reg)); //[\"aaa\", \"ccc\", \"11\"]\n```\n","slug":"js | 正则表达式的基本使用","published":1,"updated":"2020-04-03T05:32:05.689Z","layout":"post","photos":[],"link":"","_id":"ckbrouqu5000u1los702a81im","content":"<h1 id=\"正则表达式的使用\"><a href=\"#正则表达式的使用\" class=\"headerlink\" title=\"正则表达式的使用\"></a>正则表达式的使用</h1><blockquote>\n<p>本文整理了一些常用的正则表达式匹配符，使用的示例代码为 js 编写，参考文章 <a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">正则表达式手册</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expression\" target=\"_blank\" rel=\"noopener\">MDN 文档-正则表达式</a></p>\n</blockquote>\n<h2 id=\"正则表达式规则类型\"><a href=\"#正则表达式规则类型\" class=\"headerlink\" title=\"正则表达式规则类型\"></a>正则表达式规则类型</h2><ul>\n<li><p>断言</p>\n<blockquote>\n<p>表示一个匹配在某些条件发生</p>\n</blockquote>\n</li>\n<li><p>边界</p>\n<blockquote>\n<p>表示行和单词的的开始和结尾，如：<code>^ 匹配起始位置</code> ，<code>$ 匹配结束位置</code></p>\n</blockquote>\n</li>\n<li><p>字符类别</p>\n<blockquote>\n<p>区分不同类型的字符，如： <code>\\D 匹配一个非数字字符</code>，<code>\\d 匹配一个数字字符</code></p>\n</blockquote>\n</li>\n<li><p>组合范围</p>\n<blockquote>\n<p>表示表达式的分组和范围，如: <code>[a-e0-4] 匹配a-e之间的字符以及0-4的数字</code></p>\n</blockquote>\n</li>\n<li><p>量词</p>\n<blockquote>\n<p>表示匹配的字符或表达式的数量， 如： <code>a{3,4} 匹配3个或4个字母a的字符</code></p>\n</blockquote>\n</li>\n<li><p>unicode 属性转义</p>\n<blockquote>\n<p>基于 unicode 字符属性区分字符</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"常用的匹配规则\"><a href=\"#常用的匹配规则\" class=\"headerlink\" title=\"常用的匹配规则\"></a>常用的匹配规则</h2><blockquote>\n<p>以下列的是常用匹配规则，完整的匹配规则可参考：<a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">正则表达式手册</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\\S     : 匹配任意非空字符</span><br><span class=\"line\">.      : 匹配 \\n 之外的任何字符</span><br><span class=\"line\">\\D     : 匹配一个非数字字符，等价于[^0-9]</span><br><span class=\"line\">\\d     : 匹配个数字字符，等价于[0-9]</span><br><span class=\"line\">[0-9]  : 匹配一个数字字符</span><br><span class=\"line\">^      : 限定字符串的起始字符， 例如  ^a 限定匹配的字符串必须以 a 开头</span><br><span class=\"line\">$      : 限定字符串的结束字符，例如 b$ 字符串必须以b结束</span><br><span class=\"line\">\\w      : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]</span><br><span class=\"line\">&#123;&#125;      : 匹配指定次数，eg: a&#123;3,6&#125;，最低匹配三个字符a，最高匹配6个字符a</span><br><span class=\"line\">()      : 优先匹配括号中的内容</span><br><span class=\"line\">+       : 至少匹配一次，等价于&#123;1,&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局匹配模式\"><a href=\"#全局匹配模式\" class=\"headerlink\" title=\"全局匹配模式\"></a>全局匹配模式</h2><blockquote>\n<p>全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str &#x3D; &#39;123bb456bb789&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, &#39;bb&#39; ]</span><br><span class=\"line\">console.log(str.match(&#x2F;bb&#x2F;g))</span><br><span class=\"line\"></span><br><span class=\"line\">const reg &#x3D; new RegExp(&quot;bb&quot;,&quot;g&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, index: 3, input: &#39;123bb4567bb89&#39;, groups: undefined ]</span><br><span class=\"line\">console.log(reg.exec(str))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-字符串支持正则表达式的方法\"><a href=\"#js-字符串支持正则表达式的方法\" class=\"headerlink\" title=\"js 字符串支持正则表达式的方法\"></a>js 字符串支持正则表达式的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str &#x3D; &#39;123bb456d789&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; search(reg): 检索与reg相匹配的值</span><br><span class=\"line\">&#x2F;&#x2F; 输出： 3</span><br><span class=\"line\">console.log(str.search(&#x2F;b&#123;2&#125;&#x2F;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; match(reg): 找到一个或多个reg匹配的值</span><br><span class=\"line\">&#x2F;&#x2F; 输出： [ &#39;456&#39;, index: 5, input: &#39;123bb456d789&#39;, groups: undefined ]</span><br><span class=\"line\">console.log(str.match(&#x2F;[4-6]&#123;3&#125;&#x2F;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; replace(reg, str): 替换与reg匹配的值为str的内容</span><br><span class=\"line\">&#x2F;&#x2F; 输出： 123bb4561119</span><br><span class=\"line\">console.log(str.replace(&#x2F;d[7-8]&#123;2&#125;&#x2F;, &#39;111&#39;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组</span><br><span class=\"line\">&#x2F;&#x2F; 输出： [ &#39;123bb&#39;, &#39;d789&#39; ]</span><br><span class=\"line\">console.log(str.split(&#x2F;456&#x2F;, 2))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-RegExp-对象\"><a href=\"#js-RegExp-对象\" class=\"headerlink\" title=\"js RegExp 对象\"></a>js RegExp 对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complie: 编译正则表达式。</span><br><span class=\"line\">exec: 检索字符串中指定的值。返回找到的值，并确定其位置。</span><br><span class=\"line\">test: 检索字符串中指定的值。返回 true 或 false。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的正则表达式\"><a href=\"#常用的正则表达式\" class=\"headerlink\" title=\"常用的正则表达式\"></a>常用的正则表达式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 获取网络链接中的某个参数值</span><br><span class=\"line\">&#x2F;&#x2F; gcGetUrlParam（url,params） &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + params + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;     var result &#x3D; url.search.substr(1).match(reg);</span><br><span class=\"line\">&#x2F;&#x2F;     if (result &amp;&amp; result[2]) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         return result[2];</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;</span><br><span class=\"line\">&#x2F;&#x2F;     return false;</span><br><span class=\"line\">&#x2F;&#x2F; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 裁剪xx到xx之间的任意内容</span><br><span class=\"line\">&#x2F;&#x2F; let url &#x3D; https:&#x2F;&#x2F;www.v.qq.com&#x2F;?vid&#x3D;adfadsfds2243&amp;test&#x3D;true</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;vid&#x3D;(.*?)&amp;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let vid &#x3D; url.match(reg)[1]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 验证手机号码正则</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;^1([3-8])(\\d&#123;9&#125;)$&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let test &#x3D; &#39;13160694978&#39;</span><br><span class=\"line\">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class=\"line\">&#x2F;&#x2F; console.log(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 验证邮箱的正则</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;^((\\S|_|-)&#123;2,10&#125;)@(\\S&#123;2,6&#125;)(.com)$&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let test &#x3D; &#39;some_one@gmail.com&#39;</span><br><span class=\"line\">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class=\"line\">&#x2F;&#x2F; console.log(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 匹配任意重复字符</span><br><span class=\"line\">&#x2F;&#x2F; var s &#x3D; &#39;aaabccc11fdsaa&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; var reg &#x3D; &#x2F;(.)\\1+&#x2F;g;</span><br><span class=\"line\">&#x2F;&#x2F; console.log(s.match(reg)); &#x2F;&#x2F;[&quot;aaa&quot;, &quot;ccc&quot;, &quot;11&quot;]</span><br></pre></td></tr></table></figure>\n","site":{"data":{"gallery":{"Name":{"full_link":"http://example.com/full-image.png","thumb_link":"http://example.com/thumb-image.png","descr":"这是一个描述"}},"test":"\n\n\n\n\n// 查找字符串中出现次数最多的字符串\n\n\nfunction getRandom() {\n    Math.random\n}\n","links":{"创造狮":{"link":"http://chuangzaoshi.com/","avatar":"/images/favatar/chuangzaoshi-logo.png","desc":"为创意工作者而设计"},"腾讯设计导航":{"link":"http://idesign.qq.com/","avatar":"/images/favatar/idesign-logo.png","desc":"网罗全网高逼格的设计站点"}}}},"excerpt":"","more":"<h1 id=\"正则表达式的使用\"><a href=\"#正则表达式的使用\" class=\"headerlink\" title=\"正则表达式的使用\"></a>正则表达式的使用</h1><blockquote>\n<p>本文整理了一些常用的正则表达式匹配符，使用的示例代码为 js 编写，参考文章 <a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">正则表达式手册</a>，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expression\" target=\"_blank\" rel=\"noopener\">MDN 文档-正则表达式</a></p>\n</blockquote>\n<h2 id=\"正则表达式规则类型\"><a href=\"#正则表达式规则类型\" class=\"headerlink\" title=\"正则表达式规则类型\"></a>正则表达式规则类型</h2><ul>\n<li><p>断言</p>\n<blockquote>\n<p>表示一个匹配在某些条件发生</p>\n</blockquote>\n</li>\n<li><p>边界</p>\n<blockquote>\n<p>表示行和单词的的开始和结尾，如：<code>^ 匹配起始位置</code> ，<code>$ 匹配结束位置</code></p>\n</blockquote>\n</li>\n<li><p>字符类别</p>\n<blockquote>\n<p>区分不同类型的字符，如： <code>\\D 匹配一个非数字字符</code>，<code>\\d 匹配一个数字字符</code></p>\n</blockquote>\n</li>\n<li><p>组合范围</p>\n<blockquote>\n<p>表示表达式的分组和范围，如: <code>[a-e0-4] 匹配a-e之间的字符以及0-4的数字</code></p>\n</blockquote>\n</li>\n<li><p>量词</p>\n<blockquote>\n<p>表示匹配的字符或表达式的数量， 如： <code>a{3,4} 匹配3个或4个字母a的字符</code></p>\n</blockquote>\n</li>\n<li><p>unicode 属性转义</p>\n<blockquote>\n<p>基于 unicode 字符属性区分字符</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"常用的匹配规则\"><a href=\"#常用的匹配规则\" class=\"headerlink\" title=\"常用的匹配规则\"></a>常用的匹配规则</h2><blockquote>\n<p>以下列的是常用匹配规则，完整的匹配规则可参考：<a href=\"https://tool.oschina.net/uploads/apidocs/jquery/regexp.html\" target=\"_blank\" rel=\"noopener\">正则表达式手册</a></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">\\S     : 匹配任意非空字符</span><br><span class=\"line\">.      : 匹配 \\n 之外的任何字符</span><br><span class=\"line\">\\D     : 匹配一个非数字字符，等价于[^0-9]</span><br><span class=\"line\">\\d     : 匹配个数字字符，等价于[0-9]</span><br><span class=\"line\">[0-9]  : 匹配一个数字字符</span><br><span class=\"line\">^      : 限定字符串的起始字符， 例如  ^a 限定匹配的字符串必须以 a 开头</span><br><span class=\"line\">$      : 限定字符串的结束字符，例如 b$ 字符串必须以b结束</span><br><span class=\"line\">\\w      : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]</span><br><span class=\"line\">&#123;&#125;      : 匹配指定次数，eg: a&#123;3,6&#125;，最低匹配三个字符a，最高匹配6个字符a</span><br><span class=\"line\">()      : 优先匹配括号中的内容</span><br><span class=\"line\">+       : 至少匹配一次，等价于&#123;1,&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"全局匹配模式\"><a href=\"#全局匹配模式\" class=\"headerlink\" title=\"全局匹配模式\"></a>全局匹配模式</h2><blockquote>\n<p>全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str &#x3D; &#39;123bb456bb789&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, &#39;bb&#39; ]</span><br><span class=\"line\">console.log(str.match(&#x2F;bb&#x2F;g))</span><br><span class=\"line\"></span><br><span class=\"line\">const reg &#x3D; new RegExp(&quot;bb&quot;,&quot;g&quot;)</span><br><span class=\"line\">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, index: 3, input: &#39;123bb4567bb89&#39;, groups: undefined ]</span><br><span class=\"line\">console.log(reg.exec(str))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-字符串支持正则表达式的方法\"><a href=\"#js-字符串支持正则表达式的方法\" class=\"headerlink\" title=\"js 字符串支持正则表达式的方法\"></a>js 字符串支持正则表达式的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const str &#x3D; &#39;123bb456d789&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; search(reg): 检索与reg相匹配的值</span><br><span class=\"line\">&#x2F;&#x2F; 输出： 3</span><br><span class=\"line\">console.log(str.search(&#x2F;b&#123;2&#125;&#x2F;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; match(reg): 找到一个或多个reg匹配的值</span><br><span class=\"line\">&#x2F;&#x2F; 输出： [ &#39;456&#39;, index: 5, input: &#39;123bb456d789&#39;, groups: undefined ]</span><br><span class=\"line\">console.log(str.match(&#x2F;[4-6]&#123;3&#125;&#x2F;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; replace(reg, str): 替换与reg匹配的值为str的内容</span><br><span class=\"line\">&#x2F;&#x2F; 输出： 123bb4561119</span><br><span class=\"line\">console.log(str.replace(&#x2F;d[7-8]&#123;2&#125;&#x2F;, &#39;111&#39;))</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组</span><br><span class=\"line\">&#x2F;&#x2F; 输出： [ &#39;123bb&#39;, &#39;d789&#39; ]</span><br><span class=\"line\">console.log(str.split(&#x2F;456&#x2F;, 2))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-RegExp-对象\"><a href=\"#js-RegExp-对象\" class=\"headerlink\" title=\"js RegExp 对象\"></a>js RegExp 对象</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">complie: 编译正则表达式。</span><br><span class=\"line\">exec: 检索字符串中指定的值。返回找到的值，并确定其位置。</span><br><span class=\"line\">test: 检索字符串中指定的值。返回 true 或 false。</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常用的正则表达式\"><a href=\"#常用的正则表达式\" class=\"headerlink\" title=\"常用的正则表达式\"></a>常用的正则表达式</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; 获取网络链接中的某个参数值</span><br><span class=\"line\">&#x2F;&#x2F; gcGetUrlParam（url,params） &#123;</span><br><span class=\"line\">&#x2F;&#x2F;     var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + params + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);</span><br><span class=\"line\">&#x2F;&#x2F;     var result &#x3D; url.search.substr(1).match(reg);</span><br><span class=\"line\">&#x2F;&#x2F;     if (result &amp;&amp; result[2]) &#123;</span><br><span class=\"line\">&#x2F;&#x2F;         return result[2];</span><br><span class=\"line\">&#x2F;&#x2F;     &#125;</span><br><span class=\"line\">&#x2F;&#x2F;     return false;</span><br><span class=\"line\">&#x2F;&#x2F; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 裁剪xx到xx之间的任意内容</span><br><span class=\"line\">&#x2F;&#x2F; let url &#x3D; https:&#x2F;&#x2F;www.v.qq.com&#x2F;?vid&#x3D;adfadsfds2243&amp;test&#x3D;true</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;vid&#x3D;(.*?)&amp;&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let vid &#x3D; url.match(reg)[1]</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 验证手机号码正则</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;^1([3-8])(\\d&#123;9&#125;)$&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let test &#x3D; &#39;13160694978&#39;</span><br><span class=\"line\">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class=\"line\">&#x2F;&#x2F; console.log(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 验证邮箱的正则</span><br><span class=\"line\">&#x2F;&#x2F; let reg &#x3D; &#x2F;^((\\S|_|-)&#123;2,10&#125;)@(\\S&#123;2,6&#125;)(.com)$&#x2F;</span><br><span class=\"line\">&#x2F;&#x2F; let test &#x3D; &#39;some_one@gmail.com&#39;</span><br><span class=\"line\">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class=\"line\">&#x2F;&#x2F; console.log(a)</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; 匹配任意重复字符</span><br><span class=\"line\">&#x2F;&#x2F; var s &#x3D; &#39;aaabccc11fdsaa&#39;;</span><br><span class=\"line\">&#x2F;&#x2F; var reg &#x3D; &#x2F;(.)\\1+&#x2F;g;</span><br><span class=\"line\">&#x2F;&#x2F; console.log(s.match(reg)); &#x2F;&#x2F;[&quot;aaa&quot;, &quot;ccc&quot;, &quot;11&quot;]</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckbrouqtf00011losah01642r","category_id":"ckbrouqtr00041losadgig96e","_id":"ckbrouqu0000i1los5u4w8hj5"},{"post_id":"ckbrouqtu00091los58er32rg","category_id":"ckbrouqtx000d1losd4mg8m0j","_id":"ckbrouqu4000r1los83baej94"},{"post_id":"ckbrouqty000f1loseyqm9w5o","category_id":"ckbrouqu2000l1loshup9gj2b","_id":"ckbrouqu6000w1losbv7x8n28"},{"post_id":"ckbrouqu0000h1los8ospgi8l","category_id":"ckbrouqu5000s1los8p3w3cd6","_id":"ckbrouqu700101losgls1fhen"},{"post_id":"ckbrouqu2000k1los5rky713x","category_id":"ckbrouqu6000x1losd85s9v58","_id":"ckbrouqu900131lose50ocvyv"},{"post_id":"ckbrouqu5000u1los702a81im","category_id":"ckbrouqu800111los9l5vaxtm","_id":"ckbrouqua00171loshh4f4y24"}],"PostTag":[{"post_id":"ckbrouqtf00011losah01642r","tag_id":"ckbrouqts00051los82mo8crw","_id":"ckbrouqu2000m1los1kgl41lk"},{"post_id":"ckbrouqtf00011losah01642r","tag_id":"ckbrouqtw000c1los510dba28","_id":"ckbrouqu3000o1losa26oad23"},{"post_id":"ckbrouqty000f1loseyqm9w5o","tag_id":"ckbrouqu1000j1los9u8pac7p","_id":"ckbrouqu5000t1loscpdz5ge5"},{"post_id":"ckbrouqu0000h1los8ospgi8l","tag_id":"ckbrouqu4000q1losh3pg54zw","_id":"ckbrouqu6000y1losh9vzcsul"},{"post_id":"ckbrouqu2000k1los5rky713x","tag_id":"ckbrouqu6000v1los120j87y1","_id":"ckbrouqu900141los3i2zdg6z"},{"post_id":"ckbrouqu2000k1los5rky713x","tag_id":"ckbrouqu4000q1losh3pg54zw","_id":"ckbrouqu900151los1a987rsv"},{"post_id":"ckbrouqu4000p1los2fgz4rcr","tag_id":"ckbrouqu4000q1losh3pg54zw","_id":"ckbrouqua00181losdlhb970g"},{"post_id":"ckbrouqu5000u1los702a81im","tag_id":"ckbrouqua00161los1eyye8fb","_id":"ckbrouqub00191los3z5kgllz"}],"Tag":[{"name":"github","_id":"ckbrouqts00051los82mo8crw"},{"name":"效率","_id":"ckbrouqtw000c1los510dba28"},{"name":"Android","_id":"ckbrouqu1000j1los9u8pac7p"},{"name":"js","_id":"ckbrouqu4000q1losh3pg54zw"},{"name":"算法","_id":"ckbrouqu6000v1los120j87y1"},{"name":"基础","_id":"ckbrouqua00161los1eyye8fb"}]}}