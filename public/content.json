{"meta":{"title":"MyPage","subtitle":"","description":"","author":"Figure Ai","url":"http://figureai.github.io","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2020-03-20T09:51:27.795Z","updated":"2020-03-20T09:51:27.795Z","comments":false,"path":"/404.html","permalink":"http://figureai.github.io/404.html","excerpt":"","text":""},{"title":"关于","date":"2020-03-20T11:09:56.856Z","updated":"2020-03-20T11:09:56.856Z","comments":false,"path":"about/index.html","permalink":"http://figureai.github.io/about/index.html","excerpt":"","text":"我热爱的不是编程，我热爱的只是工作"},{"title":"书单","date":"2020-03-20T09:51:17.673Z","updated":"2020-03-20T09:51:17.673Z","comments":false,"path":"books/index.html","permalink":"http://figureai.github.io/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2020-03-17T15:36:43.514Z","updated":"2020-03-17T15:36:43.514Z","comments":false,"path":"categories/index.html","permalink":"http://figureai.github.io/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2020-03-20T09:51:39.625Z","updated":"2020-03-20T09:51:39.625Z","comments":true,"path":"links/index.html","permalink":"http://figureai.github.io/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2020-03-17T14:35:23.543Z","updated":"2020-03-17T14:35:23.543Z","comments":false,"path":"repository/index.html","permalink":"http://figureai.github.io/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-03-17T14:35:23.543Z","updated":"2020-03-17T14:35:23.543Z","comments":false,"path":"tags/index.html","permalink":"http://figureai.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"提高github搜索精确度","slug":"GitHub高效搜索方式","date":"2020-03-21T00:24:58.000Z","updated":"2020-03-21T00:48:50.728Z","comments":true,"path":"2020/03/21/GitHub高效搜索方式/","link":"","permalink":"http://figureai.github.io/2020/03/21/GitHub%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2%E6%96%B9%E5%BC%8F/","excerpt":"","text":"1234567891011121314151617181920212223&#x2F;&#x2F; xxx 代表搜索内容&#x2F;&#x2F; 在项目名进行精确搜索in:name xxx&#x2F;&#x2F; 搜索名字包含xxx，stars数量大于3000的项目in:name xxx stars:&gt;3000&#x2F;&#x2F; 搜索名字包含xxx，forks大于100的项目in:name xxx forks:&gt;100&#x2F;&#x2F; 搜索readme包含xxx的项目in:readme xxx&#x2F;&#x2F; 搜索描述包含xxx的项目in:description xxx&#x2F;&#x2F; 搜索xxx语言编写，名字包含xxx的项目in:name xxx language:xxx&#x2F;&#x2F; 搜索最后一次更细时间在2019年9月3日之后的项目xxx pushed:&gt;2019-09-03&#x2F;&#x2F;","categories":[{"name":"高效操作","slug":"高效操作","permalink":"http://figureai.github.io/categories/%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9C/"}],"tags":[{"name":"github","slug":"github","permalink":"http://figureai.github.io/tags/github/"},{"name":"效率","slug":"效率","permalink":"http://figureai.github.io/tags/%E6%95%88%E7%8E%87/"}]},{"title":"关于js的this指针","slug":"关于js的this指针","date":"2020-03-20T11:37:48.094Z","updated":"2020-03-20T11:37:48.094Z","comments":true,"path":"2020/03/20/关于js的this指针/","link":"","permalink":"http://figureai.github.io/2020/03/20/%E5%85%B3%E4%BA%8Ejs%E7%9A%84this%E6%8C%87%E9%92%88/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"正则表达式的使用","slug":"正则表达式的基本使用","date":"2020-03-20T06:53:45.000Z","updated":"2020-03-20T11:52:04.257Z","comments":true,"path":"2020/03/20/正则表达式的基本使用/","link":"","permalink":"http://figureai.github.io/2020/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/","excerpt":"","text":"正则表达式的使用 本文整理了一些常用的正则表达式匹配符，使用的示例代码为js编写，参考文章 正则表达式手册，MDN文档-正则表达式 正则表达式规则类型 断言 表示一个匹配在某些条件发生 边界 表示行和单词的的开始和结尾，如：^ 匹配起始位置 ，$ 匹配结束位置 字符类别 区分不同类型的字符，如： \\D 匹配一个非数字字符，\\d 匹配一个数字字符 组合范围 表示表达式的分组和范围，如: [a-e0-4] 匹配a-e之间的字符以及0-4的数字 量词 表示匹配的字符或表达式的数量， 如： a{3,4} 匹配3个或4个字母a的字符 unicode属性转义 基于unicode字符属性区分字符 常用的匹配规则 以下列的是常用匹配规则，完整的匹配规则可参考：正则表达式手册 123456789101112 \\S : 匹配任意非空字符 . : 匹配 \\n 之外的任何字符 \\D : 匹配一个非数字字符，等价于[^0-9] \\d : 匹配个数字字符，等价于[0-9] [0-9] : 匹配一个数字字符 ^ : 限定字符串的起始字符， 例如 ^a 限定匹配的字符串必须以 a 开头 $ : 限定字符串的结束字符，例如 b$ 字符串必须以b结束\\w : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]&#123;&#125; : 匹配指定次数，eg: a&#123;3,6&#125;，最低匹配三个字符a，最高匹配6个字符a() : 优先匹配括号中的内容+ : 至少匹配一次，等价于&#123;1,&#125; 全局匹配模式 全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容 12345678const str &#x3D; &#39;123bb456bb789&#39;&#x2F;&#x2F; 输出 [ &#39;bb&#39;, &#39;bb&#39; ]console.log(str.match(&#x2F;bb&#x2F;g)) const reg &#x3D; new RegExp(&quot;bb&quot;,&quot;g&quot;)&#x2F;&#x2F; 输出 [ &#39;bb&#39;, index: 3, input: &#39;123bb4567bb89&#39;, groups: undefined ]console.log(reg.exec(str)) js 字符串支持正则表达式的方法 1234567891011121314151617const str &#x3D; &#39;123bb456d789&#39;&#x2F;&#x2F; search(reg): 检索与reg相匹配的值&#x2F;&#x2F; 输出： 3console.log(str.search(&#x2F;b&#123;2&#125;&#x2F;)) &#x2F;&#x2F; match(reg): 找到一个或多个reg匹配的值&#x2F;&#x2F; 输出： [ &#39;456&#39;, index: 5, input: &#39;123bb456d789&#39;, groups: undefined ]console.log(str.match(&#x2F;[4-6]&#123;3&#125;&#x2F;))&#x2F;&#x2F; replace(reg, str): 替换与reg匹配的值为str的内容&#x2F;&#x2F; 输出： 123bb4561119console.log(str.replace(&#x2F;d[7-8]&#123;2&#125;&#x2F;, &#39;111&#39;))&#x2F;&#x2F; split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组&#x2F;&#x2F; 输出： [ &#39;123bb&#39;, &#39;d789&#39; ]console.log(str.split(&#x2F;456&#x2F;, 2)) js RegExp对象123complie: 编译正则表达式。exec: 检索字符串中指定的值。返回找到的值，并确定其位置。test: 检索字符串中指定的值。返回 true 或 false。 常用的正则表达式12345678910111213141516171819202122232425262728293031&#x2F;&#x2F; 获取网络链接中的某个参数值&#x2F;&#x2F; gcGetUrlParam（url,params） &#123;&#x2F;&#x2F; var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + params + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);&#x2F;&#x2F; var result &#x3D; url.search.substr(1).match(reg);&#x2F;&#x2F; if (result &amp;&amp; result[2]) &#123;&#x2F;&#x2F; return result[2];&#x2F;&#x2F; &#125;&#x2F;&#x2F; return false;&#x2F;&#x2F; &#125;&#x2F;&#x2F; 裁剪xx到xx之间的任意内容&#x2F;&#x2F; let url &#x3D; https:&#x2F;&#x2F;www.v.qq.com&#x2F;?vid&#x3D;adfadsfds2243&amp;test&#x3D;true&#x2F;&#x2F; let reg &#x3D; &#x2F;vid&#x3D;(.*?)&amp;&#x2F;&#x2F;&#x2F; let vid &#x3D; url.match(reg)[1]&#x2F;&#x2F; 验证手机号码正则&#x2F;&#x2F; let reg &#x3D; &#x2F;^1([3-8])(\\d&#123;9&#125;)$&#x2F;&#x2F;&#x2F; let test &#x3D; &#39;13160694978&#39;&#x2F;&#x2F; let a &#x3D; reg.exec(test)&#x2F;&#x2F; console.log(a)&#x2F;&#x2F; 验证邮箱的正则&#x2F;&#x2F; let reg &#x3D; &#x2F;^((\\S|_|-)&#123;2,10&#125;)@(\\S&#123;2,6&#125;)(.com)$&#x2F;&#x2F;&#x2F; let test &#x3D; &#39;some_one@gmail.com&#39;&#x2F;&#x2F; let a &#x3D; reg.exec(test)&#x2F;&#x2F; console.log(a)&#x2F;&#x2F; 匹配任意重复字符&#x2F;&#x2F; var s &#x3D; &#39;aaabccc11fdsaa&#39;;&#x2F;&#x2F; var reg &#x3D; &#x2F;(.)\\1+&#x2F;g;&#x2F;&#x2F; console.log(s.match(reg)); &#x2F;&#x2F;[&quot;aaa&quot;, &quot;ccc&quot;, &quot;11&quot;]","categories":[{"name":"编程通用","slug":"编程通用","permalink":"http://figureai.github.io/categories/%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8/"}],"tags":[{"name":"基础","slug":"基础","permalink":"http://figureai.github.io/tags/%E5%9F%BA%E7%A1%80/"}]}]}