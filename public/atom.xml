<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MyPage</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://figureai.github.io/"/>
  <updated>2020-03-24T06:47:12.168Z</updated>
  <id>http://figureai.github.io/</id>
  
  <author>
    <name>Figure Ai</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>有趣的js笔试题</title>
    <link href="http://figureai.github.io/2020/03/24/%E6%9C%89%E8%B6%A3%E7%9A%84js%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://figureai.github.io/2020/03/24/%E6%9C%89%E8%B6%A3%E7%9A%84js%E9%9D%A2%E8%AF%95%E9%A2%98/</id>
    <published>2020-03-24T06:27:41.000Z</published>
    <updated>2020-03-24T06:47:12.168Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="请编写一个-JavaScript-函数-parseQueryString，它的用途是把-URL-参数解析为一个对象"><a href="#请编写一个-JavaScript-函数-parseQueryString，它的用途是把-URL-参数解析为一个对象" class="headerlink" title="请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象"></a>请编写一个 JavaScript 函数 parseQueryString，它的用途是把 URL 参数解析为一个对象</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var url &#x3D; &quot;http:&#x2F;&#x2F;www.taobao.com&#x2F;index.php?key0&#x3D;0&amp;key1&#x3D;1&amp;key2&#x3D;2.....&quot;</span><br><span class="line">var obj &#x3D; parseQueryString(url);</span><br><span class="line">console.log(obj.key0)</span><br></pre></td></tr></table></figure><p>答案</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">function parseQueryString(url) &#123;</span><br><span class="line">const result &#x3D; url.split(&#39;?&#39;)</span><br><span class="line">if(result.length &lt; 2) &#123;</span><br><span class="line">return &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">const queryStr &#x3D; result[1]</span><br><span class="line">const queryArray &#x3D; queryStr.split(&#39;&amp;&#39;)</span><br><span class="line">let dict &#x3D; &#123;&#125;</span><br><span class="line">queryArray.forEach(element &#x3D;&gt; &#123;</span><br><span class="line">const keyValues &#x3D; element.split(&#39;&#x3D;&#39;)</span><br><span class="line">dict[keyValues[0]] &#x3D; keyValues[1]</span><br><span class="line">&#125;);</span><br><span class="line">console.log(dict)</span><br><span class="line">return dict</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;请编写一个-JavaScript-函数-parseQueryString，它的用途是把-URL-参数解析为一个对象&quot;&gt;&lt;a href=&quot;#请编写一个-JavaScript-函数-parseQueryString，它的用途是把-URL-参数
      
    
    </summary>
    
    
    
      <category term="js" scheme="http://figureai.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>关于js的this指向问题</title>
    <link href="http://figureai.github.io/2020/03/23/%E5%85%B3%E4%BA%8Ejs%E7%9A%84this%E6%8C%87%E9%92%88/"/>
    <id>http://figureai.github.io/2020/03/23/%E5%85%B3%E4%BA%8Ejs%E7%9A%84this%E6%8C%87%E9%92%88/</id>
    <published>2020-03-23T03:17:10.000Z</published>
    <updated>2020-03-24T06:46:29.179Z</updated>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="关于-js-的-this-指向问题"><a href="#关于-js-的-this-指向问题" class="headerlink" title="关于 js 的 this 指向问题"></a>关于 js 的 this 指向问题</h1><blockquote><p>一直以来对于 js 的 this 指针这一块理解都是比较模糊，也有查阅过相关资料，但是时间一长又会忘记，所以这篇文章单独记录一下 this 指针的指向问题，一方面加深记忆，一方面也方便自己查阅</p></blockquote><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><blockquote><p>this 的指向不是在函数定义的时候确定的，而是在函数调用的时候确定的，换句话说，函数的调用方式决定了 this 的指向，所以理解 this 的指向问题，最简单的方法就是通过分析 js 几种函数的调用模式。js 函数的调用模式有：<strong>函数调用模式</strong>、<strong>方法调用模式</strong>、<strong>构造函数调用模式</strong>、<strong>apply 和 call 调用模式</strong>、<strong>以及箭头函数</strong></p></blockquote><h2 id="函数调用模式"><a href="#函数调用模式" class="headerlink" title="函数调用模式"></a>函数调用模式</h2><blockquote><p>函数被直接调用时，其实是作为属性挂载在<strong>全局对象下</strong>，所以这种模式<strong>在浏览器环境</strong>下 this 自然指向<strong>window 对象</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/00831rSTgy1gd42s9x2hrj30ht03kdg1.jpg" alt="函数调用模式下的this指向"></p><h2 id="方法调用模式"><a href="#方法调用模式" class="headerlink" title="方法调用模式"></a>方法调用模式</h2><blockquote><p>当函数被保存为一个对象的属性，通过对象 <strong>.</strong>或者 <strong>[]</strong>调用时，称为方法调用模式，这种情况 this 被绑定在调用的对象上。</p></blockquote><ol><li>一层嵌套</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br><span class="line">const dict &#x3D; &#123;</span><br><span class="line">    name: &#39;dict&#39;,</span><br><span class="line">    test: function() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印 dict</span><br><span class="line">dict.test()</span><br></pre></td></tr></table></figure><ol start="2"><li>对象多重嵌套<blockquote><p>这种情况下，不管是嵌套多少层，this 都会指向到调用他的对象上</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const first &#x3D; &#123;</span><br><span class="line">    name: &#39;first&#39;,</span><br><span class="line">    second: &#123;</span><br><span class="line">        name: &#39;second&#39;,</span><br><span class="line">        test: function() &#123;</span><br><span class="line">            console.log(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 这里因为调用test方法是second对象，所以指向对象是second</span><br><span class="line">first.second.test()</span><br></pre></td></tr></table></figure><ol start="3"><li>方法被赋值为一个新对象<blockquote><p>这种情况下相当于回到函数调用模式</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const first &#x3D; &#123;</span><br><span class="line">    name: &#39;first&#39;,</span><br><span class="line">    second: &#123;</span><br><span class="line">        name: &#39;second&#39;,</span><br><span class="line">        test: function() &#123;</span><br><span class="line">            console.log(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name &#x3D; &#39;a&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 打印 a，这里因为a是挂载在全局对象下，所以this自然指向全局对象</span><br><span class="line">const a &#x3D; first.second.test</span><br><span class="line">a()</span><br></pre></td></tr></table></figure><h2 id="构造函数调用模式"><a href="#构造函数调用模式" class="headerlink" title="构造函数调用模式"></a>构造函数调用模式</h2><blockquote><p>如果函数在被 new 关键字创建为一个新的实例对象，那么这个函数就成为此对象的构造函数，如果<strong>构造函数不返回对象，this 就指向这个实例。</strong></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 构造函数不返回对象，this指向实例</span><br><span class="line">function Fn() &#123;</span><br><span class="line">    this.name &#x3D; &#39;hello&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const a &#x3D; new Fn()</span><br><span class="line"></span><br><span class="line">console.log(a.name)</span><br></pre></td></tr></table></figure><h2 id="call-和-apply-调用模式"><a href="#call-和-apply-调用模式" class="headerlink" title="call 和 apply 调用模式"></a>call 和 apply 调用模式</h2><blockquote><p>js 中的函数也是对象，所有函数都有两个方法 <strong>call 和 apply</strong>，这两个方法可以让我们构建一个参数数组传递给调用函数，同时也允许我们改变 this 的指向</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">name &#x3D; &#39;window&#39;</span><br><span class="line"></span><br><span class="line">function getName() &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const a &#x3D; &#123;</span><br><span class="line">    name: &#39;objA&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getName.apply(a)    &#x2F;&#x2F; objA</span><br><span class="line">getName.call(a)     &#x2F;&#x2F; objA</span><br><span class="line">getName.apply()     &#x2F;&#x2F; window</span><br><span class="line">getName.call()      &#x2F;&#x2F; window</span><br></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>以下代码中是用 es6 的 class 定义的一个方法，这段代码在 es5 的环境下理论上应该是输出 ‘window’，但是实际运行 this 的指向会变成 undefined，猜测应该是 es6 的 class 关键字做了优化。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; es6</span><br><span class="line">name &#x3D; &#39;window&#39;</span><br><span class="line">class A &#123;</span><br><span class="line">    constructor(name) &#123;</span><br><span class="line">        this.name &#x3D; name</span><br><span class="line">    &#125;</span><br><span class="line">    getName() &#123;</span><br><span class="line">        console.log(this.name)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class="line">const test &#x3D; a.getName</span><br><span class="line">&#x2F;&#x2F; 报错</span><br><span class="line">test()</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; es5</span><br><span class="line">name &#x3D; &#39;window&#39;</span><br><span class="line">function A(name) &#123;</span><br><span class="line">    this.name &#x3D; name</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getName &#x3D; function() &#123;</span><br><span class="line">    console.log(this.name)</span><br><span class="line">&#125;</span><br><span class="line">const a &#x3D; new A(&#39;objA&#39;)</span><br><span class="line">const test &#x3D; a.getName</span><br><span class="line">&#x2F;&#x2F; 打印window</span><br><span class="line">test()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;[toc]&lt;/p&gt;
&lt;h1 id=&quot;关于-js-的-this-指向问题&quot;&gt;&lt;a href=&quot;#关于-js-的-this-指向问题&quot; class=&quot;headerlink&quot; title=&quot;关于 js 的 this 指向问题&quot;&gt;&lt;/a&gt;关于 js 的 this 指向问题&lt;/h1&gt;
      
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://figureai.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>提高github搜索精确度</title>
    <link href="http://figureai.github.io/2020/03/21/GitHub%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2%E6%96%B9%E5%BC%8F/"/>
    <id>http://figureai.github.io/2020/03/21/GitHub%E9%AB%98%E6%95%88%E6%90%9C%E7%B4%A2%E6%96%B9%E5%BC%8F/</id>
    <published>2020-03-21T00:24:58.000Z</published>
    <updated>2020-03-21T00:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; xxx 代表搜索内容</span><br><span class="line">&#x2F;&#x2F; 在项目名进行精确搜索</span><br><span class="line">in:name xxx</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索名字包含xxx，stars数量大于3000的项目</span><br><span class="line">in:name xxx stars:&gt;3000</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索名字包含xxx，forks大于100的项目</span><br><span class="line">in:name xxx forks:&gt;100</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索readme包含xxx的项目</span><br><span class="line">in:readme xxx</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索描述包含xxx的项目</span><br><span class="line">in:description xxx</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索xxx语言编写，名字包含xxx的项目</span><br><span class="line">in:name xxx language:xxx</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 搜索最后一次更细时间在2019年9月3日之后的项目</span><br><span class="line">xxx pushed:&gt;2019-09-03</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="高效操作" scheme="http://figureai.github.io/categories/%E9%AB%98%E6%95%88%E6%93%8D%E4%BD%9C/"/>
    
    
      <category term="github" scheme="http://figureai.github.io/tags/github/"/>
    
      <category term="效率" scheme="http://figureai.github.io/tags/%E6%95%88%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式的使用</title>
    <link href="http://figureai.github.io/2020/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>http://figureai.github.io/2020/03/20/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</id>
    <published>2020-03-20T06:53:45.000Z</published>
    <updated>2020-03-20T11:52:04.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式的使用"><a href="#正则表达式的使用" class="headerlink" title="正则表达式的使用"></a>正则表达式的使用</h1><blockquote><p>本文整理了一些常用的正则表达式匹配符，使用的示例代码为js编写，参考文章 <a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">正则表达式手册</a>，<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expression" target="_blank" rel="noopener">MDN文档-正则表达式</a></p></blockquote><h2 id="正则表达式规则类型"><a href="#正则表达式规则类型" class="headerlink" title="正则表达式规则类型"></a>正则表达式规则类型</h2><ul><li><p>断言 </p><blockquote><p>表示一个匹配在某些条件发生</p></blockquote></li><li><p>边界</p><blockquote><p>表示行和单词的的开始和结尾，如：<code>^ 匹配起始位置</code> ，<code>$ 匹配结束位置</code></p></blockquote></li><li><p>字符类别</p><blockquote><p>区分不同类型的字符，如： <code>\D 匹配一个非数字字符</code>，<code>\d 匹配一个数字字符</code></p></blockquote></li><li><p>组合范围</p><blockquote><p>表示表达式的分组和范围，如: <code>[a-e0-4] 匹配a-e之间的字符以及0-4的数字</code></p></blockquote></li><li><p>量词</p><blockquote><p>表示匹配的字符或表达式的数量， 如： <code>a{3,4} 匹配3个或4个字母a的字符</code></p></blockquote></li><li><p>unicode属性转义</p><blockquote><p>基于unicode字符属性区分字符</p></blockquote></li></ul><h2 id="常用的匹配规则"><a href="#常用的匹配规则" class="headerlink" title="常用的匹配规则"></a>常用的匹配规则</h2><blockquote><p>以下列的是常用匹配规则，完整的匹配规则可参考：<a href="https://tool.oschina.net/uploads/apidocs/jquery/regexp.html" target="_blank" rel="noopener">正则表达式手册</a></p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line"> \S     : 匹配任意非空字符</span><br><span class="line"> .      : 匹配 \n 之外的任何字符</span><br><span class="line"> \D     : 匹配一个非数字字符，等价于[^0-9]</span><br><span class="line"> \d     : 匹配个数字字符，等价于[0-9]</span><br><span class="line"> [0-9]  : 匹配一个数字字符</span><br><span class="line"> ^      : 限定字符串的起始字符， 例如  ^a 限定匹配的字符串必须以 a 开头</span><br><span class="line"> $      : 限定字符串的结束字符，例如 b$ 字符串必须以b结束</span><br><span class="line">\w      : 匹配包括下划线的任何单词或数字，等价于[A-Za-z0-9_]</span><br><span class="line">&#123;&#125;      : 匹配指定次数，eg: a&#123;3,6&#125;，最低匹配三个字符a，最高匹配6个字符a</span><br><span class="line">()      : 优先匹配括号中的内容</span><br><span class="line">+       : 至少匹配一次，等价于&#123;1,&#125;</span><br></pre></td></tr></table></figure><h2 id="全局匹配模式"><a href="#全局匹配模式" class="headerlink" title="全局匹配模式"></a>全局匹配模式</h2><blockquote><p>全局匹配模式即在匹配到第一个字符串后，会继续往后检索，直到检索完所有内容</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">const str &#x3D; &#39;123bb456bb789&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, &#39;bb&#39; ]</span><br><span class="line">console.log(str.match(&#x2F;bb&#x2F;g)) </span><br><span class="line"></span><br><span class="line">const reg &#x3D; new RegExp(&quot;bb&quot;,&quot;g&quot;)</span><br><span class="line">&#x2F;&#x2F; 输出 [ &#39;bb&#39;, index: 3, input: &#39;123bb4567bb89&#39;, groups: undefined ]</span><br><span class="line">console.log(reg.exec(str))</span><br></pre></td></tr></table></figure><h2 id="js-字符串支持正则表达式的方法"><a href="#js-字符串支持正则表达式的方法" class="headerlink" title="js 字符串支持正则表达式的方法"></a>js 字符串支持正则表达式的方法</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">const str &#x3D; &#39;123bb456d789&#39;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; search(reg): 检索与reg相匹配的值</span><br><span class="line">&#x2F;&#x2F; 输出： 3</span><br><span class="line">console.log(str.search(&#x2F;b&#123;2&#125;&#x2F;))  </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; match(reg): 找到一个或多个reg匹配的值</span><br><span class="line">&#x2F;&#x2F; 输出： [ &#39;456&#39;, index: 5, input: &#39;123bb456d789&#39;, groups: undefined ]</span><br><span class="line">console.log(str.match(&#x2F;[4-6]&#123;3&#125;&#x2F;))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; replace(reg, str): 替换与reg匹配的值为str的内容</span><br><span class="line">&#x2F;&#x2F; 输出： 123bb4561119</span><br><span class="line">console.log(str.replace(&#x2F;d[7-8]&#123;2&#125;&#x2F;, &#39;111&#39;))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; split(reg, number): 把字符依照reg匹配规则分割，并且返回一个number长度的数组</span><br><span class="line">&#x2F;&#x2F; 输出： [ &#39;123bb&#39;, &#39;d789&#39; ]</span><br><span class="line">console.log(str.split(&#x2F;456&#x2F;, 2))</span><br></pre></td></tr></table></figure><h2 id="js-RegExp对象"><a href="#js-RegExp对象" class="headerlink" title="js RegExp对象"></a>js RegExp对象</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">complie: 编译正则表达式。</span><br><span class="line">exec: 检索字符串中指定的值。返回找到的值，并确定其位置。</span><br><span class="line">test: 检索字符串中指定的值。返回 true 或 false。</span><br></pre></td></tr></table></figure><h2 id="常用的正则表达式"><a href="#常用的正则表达式" class="headerlink" title="常用的正则表达式"></a>常用的正则表达式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 获取网络链接中的某个参数值</span><br><span class="line">&#x2F;&#x2F; gcGetUrlParam（url,params） &#123;</span><br><span class="line">&#x2F;&#x2F;     var reg &#x3D; new RegExp(&quot;(^|&amp;)&quot; + params + &quot;&#x3D;([^&amp;]*)(&amp;|$)&quot;);</span><br><span class="line">&#x2F;&#x2F;     var result &#x3D; url.search.substr(1).match(reg);</span><br><span class="line">&#x2F;&#x2F;     if (result &amp;&amp; result[2]) &#123;</span><br><span class="line">&#x2F;&#x2F;         return result[2];</span><br><span class="line">&#x2F;&#x2F;     &#125;</span><br><span class="line">&#x2F;&#x2F;     return false;</span><br><span class="line">&#x2F;&#x2F; &#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 裁剪xx到xx之间的任意内容</span><br><span class="line">&#x2F;&#x2F; let url &#x3D; https:&#x2F;&#x2F;www.v.qq.com&#x2F;?vid&#x3D;adfadsfds2243&amp;test&#x3D;true</span><br><span class="line">&#x2F;&#x2F; let reg &#x3D; &#x2F;vid&#x3D;(.*?)&amp;&#x2F;</span><br><span class="line">&#x2F;&#x2F; let vid &#x3D; url.match(reg)[1]</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 验证手机号码正则</span><br><span class="line">&#x2F;&#x2F; let reg &#x3D; &#x2F;^1([3-8])(\d&#123;9&#125;)$&#x2F;</span><br><span class="line">&#x2F;&#x2F; let test &#x3D; &#39;13160694978&#39;</span><br><span class="line">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class="line">&#x2F;&#x2F; console.log(a)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 验证邮箱的正则</span><br><span class="line">&#x2F;&#x2F; let reg &#x3D; &#x2F;^((\S|_|-)&#123;2,10&#125;)@(\S&#123;2,6&#125;)(.com)$&#x2F;</span><br><span class="line">&#x2F;&#x2F; let test &#x3D; &#39;some_one@gmail.com&#39;</span><br><span class="line">&#x2F;&#x2F; let a &#x3D; reg.exec(test)</span><br><span class="line">&#x2F;&#x2F; console.log(a)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配任意重复字符</span><br><span class="line">&#x2F;&#x2F; var s &#x3D; &#39;aaabccc11fdsaa&#39;;</span><br><span class="line">&#x2F;&#x2F; var reg &#x3D; &#x2F;(.)\1+&#x2F;g;</span><br><span class="line">&#x2F;&#x2F; console.log(s.match(reg)); &#x2F;&#x2F;[&quot;aaa&quot;, &quot;ccc&quot;, &quot;11&quot;]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式的使用&quot;&gt;&lt;a href=&quot;#正则表达式的使用&quot; class=&quot;headerlink&quot; title=&quot;正则表达式的使用&quot;&gt;&lt;/a&gt;正则表达式的使用&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;本文整理了一些常用的正则表达式匹配符，使用的示例代码为js编写，参
      
    
    </summary>
    
    
      <category term="编程通用" scheme="http://figureai.github.io/categories/%E7%BC%96%E7%A8%8B%E9%80%9A%E7%94%A8/"/>
    
    
      <category term="基础" scheme="http://figureai.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
